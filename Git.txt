  one commit for every logical change
  
  working directory - staging area - repository

  GitHub: https://github.com/Myrmidonut/repository.git
---------------------------------------------------------------------------------------------------
FIRST STEPS FOR NEW REPOSITORY:
  local -> GitHub:
    git init
    git add .
    git commit -m "..."

    create GitHub repository without readme

    git remote add origin https://github.com/Myrmidonut/xxx.git
    git push -u origin master

  GitHub -> local:
    create GitHub repository with readme

    git clone https://github.com/Myrmidonut/xxx.git
    add files
    git add .
    git commit -m "..."
    git push origin master

  commits:
    git diff HEAD
---------------------------------------------------------------------------------------------------
GITHUB:
  README.md:
    headline:
      # ...                         first headline
      ...
      ## ...                        second headline
      ...
      ### ...                       third headline
      ...

    code:
      ```
      ...                           codeblock
      ```

    list:
      * ...                         first entry
      * ...                         second entry

    link:
      [...](http...)                link with title

    formatting:
      **...**                       bold
      *...*                         cursive
---------------------------------------------------------------------------------------------------
GITIGNORE:
  .gitignore                        filename

  #...                              comment

  example:
    # env
    *.env

    # compiled output
    /dist

    # dependencies
    /node_modules

    # System Files
    .DS_Store
    Thumbs.db
---------------------------------------------------------------------------------------------------
SHORT VERSION:
  git init                          create .git folder
  git status                        show changes
  git add .                         add all files
  git add -A                        add all files + untracked files
  git add ...                       add specific file
  git rm --cached ...               remove file
  git commit -m "..."               create commit
  git commit --amend -m "..."       add commit message late

  git log                           show commit history
  git log --pretty=oneline          shorter style
  git diff                          show differences between working and staging
  git diff old new                  show differences between two commits, first four symbols
  git diff HEAD                     show differences to last commit

  git show HEAD                     show most recent commit
  git checkout HEAD ...             go back to most recent commit

  git reset HEAD ...                remove changes from staging
  git reset ...                     go back to an ID

  git reset --hard HEAD                             reset all changes since last commit
  git reset --hard <commidId> && git clean -f       go back to specific commit
  git push -f                                       push to github

  git remote add origin ...         access to GitHub URL
  git remote add upstream ...       add upstream remote to a cloned repository to pull in changes
  git remote -v                     details of remote
  git remote set-url origin ...     change GitHub URL
  git push origin master            push to GitHub
  git push -u origin master         -u remembers parameters, use git push next time
  git pull origin master            pull from GitHub
  git fetch --dry-run               shows changes to remote before a pull

  git clone ...                     clone a repository from an URL
  git clone ... .                   clones without creating a new folder
  git clone -l "..."                clone local repository

  git branch                        list branches
  git branch ...                    create branch
  git branch -d ...                 delete branch
  git checkout ...                  open branch
  git merge ...                     merge branch into current branch
  git fetch origin                  same as git pull origin master
  git merge master origin/master    same as git merge master origin/master
  
  conflict:
    checkout branch
    merge master into branch
    resolve conflicts
      << HEAD
      ... current branch
      ==
      ... merged branch
      >> branch
    commit
    checkout master
    merge branch into master

  git config --global user.name "..."     name
  git config --global user.email "..."    email
  git config --global user.username ...   username for GitHub
---------------------------------------------------------------------------------------------------
OVERVIEW:
  repository              contains all commits
  remote                  online repository, e.g. on GitHub
  commit                  contains a change in code
  branch                  label for different versions
    master                main branch
    origin/master         branch after a push/pull
  clone                   copy of a repository
  fork                    copy of a repository on GitHub
  merge                   combine different clones
    fast-forward merge    reaching a commit from another commit
---------------------------------------------------------------------------------------------------
FILES:
  stored in .git folder
---------------------------------------------------------------------------------------------------







old:
---------------------------------------------------------------------------------------------------
START:
  git clone                               create copy of a repository
  git init                                creates an empty .git folder
  git branch                              show current branch
    git branch -a                         shows more information
    git branch name                       creates a new branch called name
  git log --graph --oneline master name   show commits of two different branches in a short way
---------------------------------------------------------------------------------------------------
BRANCH:
  git branch                        lists all branches
  git branch name                   create a branch called name
  git checkout name                 switches to the branch called name
    git checkout -b name            create a branch called name and switches to it
  git merge name1 name2             merges two branches
    check manually for conflicts!
    inside a file with conflict:
      <<<<<<< HEAD
      ||||||| merged common ancestors
      =======
      >>>>>>> master
  git branch -d name                delete the branch called name
  git checkout ID                   switch the code to a commit
---------------------------------------------------------------------------------------------------
STAGING AREA:
  git status                shows the files that were changed since the last commit
  git add                   adds files to the staging area for the next commit
  git add .                 add all files
  git add -A                add all files and untracked files
  git reset                 resets the staging area
  git commit                creates a commit
    -m "commit message"     adds a commit message
---------------------------------------------------------------------------------------------------
COMPARING COMMITS:
  git log                   lists the recent commits
  git diff ID_old ID2_new   compares two commits, shows as additions
    git diff                compares staging area and working directory
    git diff --staged       compares staging area and most recent commit
---------------------------------------------------------------------------------------------------
COMMIT MESSAGE:
  type: subject       feat/fix/docs/style/refactor/test/chore: <50 characters, first capital letter, no period

  body                optional, describes a commit in more detail

  footer              optional, issue tracker ID
---------------------------------------------------------------------------------------------------
GITHUB:
  always pull manually
  fork -> get clone URL
  local:
  clone with URL -> branch
---------------------------------------------------------------------------------------------------
REMOTE REPOSITORY:
  git remote                        create an empty remote branch
  git remote add origin URL         get the URL from the GitHub page, e.g. https://github.com/Myrmidonut/reflections.git
  git remote -v                     verbose output with more details
  git push origin master            moves the local master branch to the remote origin branch
  git pull origin master            moves the remote origin branch to the local master branch
    git fetch origin                same as above
    git merge master origin/master
