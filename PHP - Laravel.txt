COMMANDS:
  artisan                           command line interface
  composer global require "laravel/installer"

  laravel new ...                   create new project
  php artisan serve                 open local webserver

  php artisan migrate               initialize database from /database/migrations/

  php artisan help ...              show details for commands

  composer dump-autoload            reload in case of error
---------------------------------------------------------------------------------------------------
MVC:
  Model:
    fetching data

  View:
    presentation

  Controller:
    delegate

  php artisan make:controller PostsController       controller
  php artisan make:model Post                       model
  php artisan make:migration create_posts_table     migration

  php artisan make:model Post -mc                   model + migration + controller
---------------------------------------------------------------------------------------------------
FILES AND FOLDERS;
  /routes/                          routes
    web.php                         entrypoint

  /resources/views/                 views
    welcome.blade.php               

  /.env                             keys for database, etc
---------------------------------------------------------------------------------------------------
VIEWS:
  /resources/views/
    layout.blade.php:                           layout page
      <!DOCTYPE html>
      <html>
        <head>
          <title>
            @yield("title", "Default Title")    inserts title here, with default
          </title>
        </head>
        <body>
          @yield("content")                     inserts content here
        </body>
      </html>

    index.blade.php:                            content page
      @extends ("layout")
      @section("title", "Home Page")            title, in one line
      @section ("content")                      content
        ...
      @endsection
---------------------------------------------------------------------------------------------------
BLADE:
  code replacements, with sanitization:
    @...                                    <?php ... ?>
    {{ ... }}                               <?= ... ?>

  examples:
    <?php foreach ($tasks as $task) : ?>    PHP
      <li><?= $task; ?>
    <?php endforeach; ?>

    @foreach ($tasks as $task)              Blade
      <li>{{ $task }}</li>
    @endforeach
---------------------------------------------------------------------------------------------------
ROUTES:
  get:
    Route::get('/', function () {                     listen to this URL
      return view('welcome', [                        sends to this view
        "name" => "World"                             passes data along
      ]);
    });

    return view("welcome")->with("name", "World");    alternative

    $name = "World";                                  alternative
    return view("welcome", ["name" => $name]);

    $name = "World";                                  alternative
    return view("welcome", compact("name"));

  wildcard:
    Route::get("/tasks/{id}", function() {});         {...} can be anything

  subfolders:
    return view("tasks/id");
    return view("tasks.id");                          alternative

  with controllers:
    Route::get("/tasks", "TasksController@index");

    ...->name("home");                                used in controller for redirect
      return redirect()->home();

    /app/Http/Controllers/                            folder for controllers

    php artisan make:controller TasksController       create a controlelr file
---------------------------------------------------------------------------------------------------
CONTROLLERS:
  gets called by route:
    Route::get("/", "PagesController@home");          route

  declares functions and returns views:
    class PagesController extends Controller {        controller
      public function home() {                        function
        return view("welcome", [                      return view
          "foo" => "bar"                              optional data
        ]);
      }
    }

  php artisan make:controller ...                     create controller in /app/Http/Controllers
    -r                                                with functions

  wildcard:
    public function show($id) {                       longer
      $task = Task::find($id);
    
      return view("tasks.show", compact("task"));
    }

    public function show(Task $task) {                shorter, wildcard = {task}
      return view("tasks.show", compact("task"));
    }
---------------------------------------------------------------------------------------------------
DATABASE:
  migration:
    php artisan make:migration create_tasks_table     create file in /database/migrations/

    php artisan migrate                               add a new migration
    php artisan migrate:refresh                       roll back and migrate
    php artisan migrate:reset                         roll back without migrate

  migration file:
    $table->increments('id');
    $table->text("body");
    $table->boolean("completed")->default(false);     default
    $table->timestamps();

  query:
    $... = DB::table("...")->get();                   query the database

    get()
    where()
    latest()
    find()
---------------------------------------------------------------------------------------------------
TINKER:
  php artisan tinker                      CLI to interact with the application

  App\Task::all()                         show all Tasks
  App\Task::where("id", ">", 2)->get()    show specific Tasks
  App\Task::pluck("body")                 show specific field
  App\Task::pluck("body")->first()        only the first one
---------------------------------------------------------------------------------------------------
ELOQUENT:
  php artisan make:model Task                           create /app/Task.php model

  web.php:
    use App\Task;                                       set namespace

    Route::get('/tasks', function () {
      //$tasks = DB::table("tasks")->latest()->get();   old style

      $tasks = Task::all();                             Eloquent style

      return view('tasks.index', compact("tasks"));
    });

  php artisan make:model Task -m                        create model and migration
  adjust migration file
  php artisan migrate

  add functions to the model file

  query scopes:
    wrapper around a query
---------------------------------------------------------------------------------------------------
FORMS:
  <form>
    {{ csrf_field() }}                    cross-site protection, creates a token
    ...
  </form>
---------------------------------------------------------------------------------------------------
REQUEST:
  request()->all()                        show request data
  request("title")
  request(["titel", "body"])
---------------------------------------------------------------------------------------------------
VALIDATION:
  in route function inside controller:
    $this->validate(request(), [
      "title" => "required",
      ...
    ]);

    name="password_confirmed":
      "required|confirmed"                check if password and password_confirmed are equal
---------------------------------------------------------------------------------------------------
TIME DATE:
  Carbon:
    use Carbon\Carbon;

    Carbon::parse($month)->month          convert string to number

  toFormattedDateString()                 makes dates readable
  diffForHumans()                         elapsed time
---------------------------------------------------------------------------------------------------
AUTHENTICATION:
  php artisan make:auth                         creates login and register

    creates:
      /routes/web.php:
        Auth::routes();

      /resources/views/auth/...

      /app/Http/Controllers/HomeController.php