COMMANDS:
  one time install:
    composer global require "laravel/installer"
  --------------------
  laravel new ...                   create new project
  --------------------
  php artisan serve                 open local webserver
  --------------------
  composer dump-autoload            reload in case of error
---------------------------------------------------------------------------------------------------
FILES AND FOLDERS:
  /app                              application
    /Http                           models
    /Http/Controllers               controllers
    /Http/Middleware                middleware
    /Providers                      add custom functionality to Laravel
  /bootstrap                        bootstrapping the framework
  /config                           configurations called with .env
  /database                         database
    /migrations                     migrations
  /public                           images, compiled JS and CSS
    /index.php                      entry point for requests
  /resources/views                  views, sass, react, js, etc.
  /routes                           routes
    api.php                         api routes
    channels.php                    broadcasting backend to frontend
    console.php                     artisan routes
    web.php                         main routes
  /storage                          files generated by the framework, logs
  /tests                            tests
  /vendor                           composer dependencies

  .editorconfig                     tabsize, etc.
  .env                              secret keys for database, etc
  artisan                           runs on artisan commands
  composer.json                     dependencies
  composer.lock                     saves specific dependencies
  package.json                      frontend dependencies for node
---------------------------------------------------------------------------------------------------
MVC:
  Model:
    fetching data

  View:
    presentation

  Controller:
    delegate
  --------------------
  Routes:
    redirect

  Migrations:
    blueprints for database tables

  Models:
    blueprints for database table entries
  --------------------
  php artisan make:controller PostsController       controller
  php artisan make:model Post                       model
  php artisan make:migration create_posts_table     migration

  php artisan make:model Post -mc                   model + migration + controller
---------------------------------------------------------------------------------------------------
WORKFLOW:
  create route to controller:
    Route::get("/projects", "ProjectsController@index");    /routes/web.php

  create controller for view:
    php artisan make:controller ProjectsController

  create functions inside controller:
    class ProjectsController extends Controller {           /app/Http/Controllers/Controller.php
      public function index() {
        return view("projects/index");
      }
    }

  create view:                                              /resources/views/welcome.blade.php

  configure .env for database:                              /.env
    DB_CONNECTION=mysql
    DB_HOST=127.0.0.1
    DB_PORT=3306
    DB_DATABASE=tutorial
    DB_USERNAME=root
    DB_PASSWORD=

  create migration for database:                            /database/migrations/2018...php

  create model to get data:                                 /app/User.php
---------------------------------------------------------------------------------------------------
VIEWS:
  /resources/views/                             main folder

  layout.blade.php:                             layout page
    <!DOCTYPE html>
    <html>
      <head>
        <title>
          @yield("title", "Default Title")      inserts title here, with default
        </title>
      </head>
      <body>
        @yield("content")                       inserts content here
      </body>
    </html>

  index.blade.php:                              content page
    @extends ("layout")
    @section("title", "Home Page")              title, single line
    @section ("content")                        content, multiple lines
      ...
    @endsection
---------------------------------------------------------------------------------------------------
BLADE:
  code replacements, with sanitization:
    @...                                        <?php ... ?>
    {{ ... }}                                   <?= ... ?>

  examples:
    <?php foreach ($tasks as $task) : ?>        PHP
      <li><?= $task; ?>
    <?php endforeach; ?>

    @foreach ($tasks as $task)                  Blade
      <li>{{ $task }}</li>
    @endforeach
---------------------------------------------------------------------------------------------------
ROUTES:
  get:
    Route::get('/', function () {                     listen to this URL
      return view('welcome', [                        sends to this view
        "name" => "World"                             passes data along
      ]);
    });

    return view("welcome")->with("name", "World");    alternative

    return view("welcome")->withName("World");        alternative

    $name = "World";                                  alternative
    return view("welcome", ["name" => $name]);

    $name = "World";                                  alternative
    return view("welcome", compact("name"));
  --------------------
  wildcard:
    Route::get("/tasks/{id}", function() {});         {...} can be anything
  --------------------
  subfolders:
    return view("tasks/id");
    return view("tasks.id");                          alternative
  --------------------
  all in one:
    Route::resource("...", "...");                    creates all routes
  --------------------
  with controllers:
    Route::get("/tasks", "TasksController@index");

    ...->name("home");                                used in controller for redirect
      return redirect()->home();

    /app/Http/Controllers/                            folder for controllers

    php artisan make:controller TasksController       create a controlelr file
  --------------------
  php artisan route:list                              show all routes
---------------------------------------------------------------------------------------------------
CONTROLLERS:
  called in routes file
  declares functions
  returns views

  php artisan make:controller PagesController         create controller

  Route:
    Route::get("/", "PagesController@home");          create route

  Controller:
    class PagesController extends Controller {        create controller
      public function home() {                        function
        return view("welcome", [                      return view, in /resources/views/
          "foo" => "bar"                              optional data
        ]);
      }
    }

  php artisan make:controller ...                     create controller in /app/Http/Controllers
    -r                                                with functions
    -m ...                                            with model
  --------------------
  wildcard:
    public function show($id) {                       longer
      $task = Task::find($id);
    
      return view("tasks.show", compact("task"));
    }

    public function show(Task $task) {                shorter, wildcard = {task}
      return view("tasks.show", compact("task"));
    }
  --------------------
  namespace:
    namespace App\Http\Controllers;

    use App\Project;                                  imports model
  --------------------
  naming conventions:
    GET	        /photos	              @index	    photos.index
    GET	        /photos/create	      @create	    photos.create
    POST	      /photos	              @store	    photos.store
    GET	        /photos/{photo}	      @show	      photos.show
    GET	        /photos/{photo}/edit	@edit	      photos.edit
    PUT/PATCH	  /photos/{photo}	      @update	    photos.update
    DELETE	    /photos/{photo}	      @destroy	  photos.destroy
  --------------------
  return:
    "...";                        string
    [...]                         array

    response("...")

    view("...");                  open page after get

    redirect("...");              open page after post

    request()                     creates array
      ->all();                    everything
      ->input("name");            user input
      ->query("name");            query
      ->only("...", "...");       subset
      ->except("...", "...");     subset
      ->file(")
---------------------------------------------------------------------------------------------------
MIGRATIONS:
  version control for databases

  /database/migrations/                             folder for migration files

  php artisan make:migration ...                    create migration file

  php artisan migrate                               add a new migration
  php artisam migrate:fresh                         drop all tables and migrate
  php artisan migrate:rollback                      undo last migration
  php artisan migrate:reset                         undo all migrations ever done
--------------------
migration file:
  $table->increments('id');                         counter
  $table->string("title");                          short text
  $table->text("body");                             long text
  $table->boolean("completed")->default(false);     boolen with default
  $table->timestamps();                             timestamp

  up()                                              create table
  down()                                            rollback (drop by default)
    for migrate:rollback
--------------------
query:
  $... = DB::table("...")->get();                   query the database

  get()
  where()
  latest()
  find()
  findOrFail()
--------------------
error with XAMPP:
  app/Providers/AppServiceProvider.php
    use Illuminate\Support\Facades\Schema;

    public function boot() {
      Schema::defaultStringLength(191);
    }
  
  delete table and run migrate again
---------------------------------------------------------------------------------------------------
MODELS:
  /app/                                   folder for model files

  php artisan make:model ...              create model file
---------------------------------------------------------------------------------------------------
TINKER:
  interact with the application
  try out commands for the database

  php artisan tinker                          open command line

  App\Modelname::command1()->command2();      run chainable commands

  App\Task::all()                             show all Tasks
  App\Task::first()
  App\Task::latest()
  App\Task::where("id", ">", 2)->get()        show specific Tasks
  App\Task::pluck("body")                     show specific field
  App\Task::pluck("body")->first()            only the first one

  $project = new App\Project;
  $project->title = "...";
  $project;
  $project->save();
---------------------------------------------------------------------------------------------------
MODEL:
  one model for each database table

  /app/Project.php

  use in controller:
    $projects = \App\Project::all();

  class Project extends Model {
    protected $fillable = ["title", "description"];     only allows these fields to go through
    protected $guarded = [];                            
  }
---------------------------------------------------------------------------------------------------
ELOQUENT:
  php artisan make:model Task                           create /app/Task.php model
  --------------------
  web.php:
    use App\Task;                                       set namespace

    Route::get('/tasks', function () {
      $tasks = DB::table("tasks")->latest()->get();     old style

      $tasks = Task::all();                             Eloquent style

      return view('tasks.index', compact("tasks"));
    });
  --------------------
  php artisan make:model Task -m                        create model and migration
  adjust migration file
  php artisan migrate

  add functions to the model file
  --------------------
  query scopes:
    wrapper around a query
---------------------------------------------------------------------------------------------------
FORMS:
  <form method="POST" action="/">
    {{ csrf_field() }}                        cross-site protection, creates a token
    @csrf                                     blade

    {{ method_field("PATCH") }}               use for PATCH, PUT, DELETE
    @method("PATCH")                          blade

    <input ... value="{{ old("title") }}">    save data in case or error
    ...
  </form>
---------------------------------------------------------------------------------------------------
VALIDATION:
  in route function inside controller:
    request()->validate([
      "title" => ["required", "min:3"],
      "description" => ["required", "max:255"]
    ]);

    creates $errors array

    name="password_confirmed":
      "password" => "required|confirmed"      check if password and password_confirmed are equal
---------------------------------------------------------------------------------------------------
TIME DATE:
  Carbon:
    use Carbon\Carbon;

    Carbon::parse($month)->month          convert string to number

  toFormattedDateString()                 makes dates readable
  diffForHumans()                         elapsed time
---------------------------------------------------------------------------------------------------
AUTHENTICATION:
  php artisan make:auth                         creates login and register

    creates:
      /routes/web.php:
        Auth::routes();

      /resources/views/auth/...

      /app/Http/Controllers/HomeController.php
---------------------------------------------------------------------------------------------------
RECAP:
  routes in /routes/wep.php
  controllers in /app/Http/Controllers/
  generate controller with php artisan make:controller MyController
  resources like sass or js in /resources/
  views in /resources/views/