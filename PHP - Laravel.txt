COMMANDS:
  artisan                           command line interface
  composer global require "laravel/installer"

  laravel new ...                   create new project
  php artisan serve                 open local webserver

  php artisan migrate               initialize database from /database/migrations/

  php artisan help ...              show details for commands

  composer dump-autoload            reload in case of error
---------------------------------------------------------------------------------------------------
FILES AND FOLDERS;
  /app/                             models
  /app/Http/Controllers/            controllers
  /app/Http/Middleware/             middleware
  /config/                          configurations using .env
  /database/migrations/             migrations
  /public/                          images, etc.
  /resources/views/                 views 
  /routes/                          routes

  /.env                             keys for database, etc
---------------------------------------------------------------------------------------------------
MVC:
  Model:
    fetching data

  View:
    presentation

  Controller:
    delegate

  php artisan make:controller PostsController       controller
  php artisan make:model Post                       model
  php artisan make:migration create_posts_table     migration

  php artisan make:model Post -mc                   model + migration + controller
---------------------------------------------------------------------------------------------------
WORKFLOW:
  create route to controller:                              /routes/web.php
    Route::get("/projects", "ProjectsController@index");

  create controller for view:                              /app/Http/Controllers/Controller.php
    php artisan make:controller ProjectsController

    class ProjectsController extends Controller {
      public function index() {
        return view("projects/index");
      }
    }

  create view:                                             /resources/views/welcome.blade.php

  configure .env for database:                             /.env
  create migration for database:                           /database/migrations/2018...php
  create model to get data:                                /app/User.php
---------------------------------------------------------------------------------------------------
VIEWS:
  /resources/views/
    layout.blade.php:                           layout page
      <!DOCTYPE html>
      <html>
        <head>
          <title>
            @yield("title", "Default Title")    inserts title here, with default
          </title>
        </head>
        <body>
          @yield("content")                     inserts content here
        </body>
      </html>

    index.blade.php:                            content page
      @extends ("layout")
      @section("title", "Home Page")            title, single line
      @section ("content")                      content, multiple lines
        ...
      @endsection
---------------------------------------------------------------------------------------------------
BLADE:
  code replacements, with sanitization:
    @...                                    <?php ... ?>
    {{ ... }}                               <?= ... ?>

  examples:
    <?php foreach ($tasks as $task) : ?>    PHP
      <li><?= $task; ?>
    <?php endforeach; ?>

    @foreach ($tasks as $task)              Blade
      <li>{{ $task }}</li>
    @endforeach
---------------------------------------------------------------------------------------------------
ROUTES:
  get:
    Route::get('/', function () {                     listen to this URL
      return view('welcome', [                        sends to this view
        "name" => "World"                             passes data along
      ]);
    });

    return view("welcome")->with("name", "World");    alternative

    $name = "World";                                  alternative
    return view("welcome", ["name" => $name]);

    $name = "World";                                  alternative
    return view("welcome", compact("name"));

  wildcard:
    Route::get("/tasks/{id}", function() {});         {...} can be anything

  subfolders:
    return view("tasks/id");
    return view("tasks.id");                          alternative

  all in one:
    Route::resource("...", "...");                    creates all routes

  with controllers:
    Route::get("/tasks", "TasksController@index");

    ...->name("home");                                used in controller for redirect
      return redirect()->home();

    /app/Http/Controllers/                            folder for controllers

    php artisan make:controller TasksController       create a controlelr file

  php artisan route:list                              show all routes
---------------------------------------------------------------------------------------------------
CONTROLLERS:
  gets called by route:
    Route::get("/", "PagesController@home");          route

  declares functions and returns views:
    class PagesController extends Controller {        controller
      public function home() {                        function
        return view("welcome", [                      return view, in /resources/views/
          "foo" => "bar"                              optional data
        ]);
      }
    }

  php artisan make:controller ...                     create controller in /app/Http/Controllers
    -r                                                with functions
    -m ...                                            with model

  wildcard:
    public function show($id) {                       longer
      $task = Task::find($id);
    
      return view("tasks.show", compact("task"));
    }

    public function show(Task $task) {                shorter, wildcard = {task}
      return view("tasks.show", compact("task"));
    }

  namespace:
    namespace App\Http\Controllers;

    use App\Project;                                  imports model

  naming conventions:
    GET	        /photos	              @index	    photos.index
    GET	        /photos/create	      @create	    photos.create
    POST	      /photos	              @store	    photos.store
    GET	        /photos/{photo}	      @show	      photos.show
    GET	        /photos/{photo}/edit	@edit	      photos.edit
    PUT/PATCH	  /photos/{photo}	      @update	    photos.update
    DELETE	    /photos/{photo}	      @destroy	  photos.destroy

  return:
    "...";                        string
    [...]                         array

    response("...")

    view("...");                  open page after get

    redirect("...");              open page after post

    request()                     creates array
      ->all();                    everything
      ->input("name");            user input
      ->query("name");            query
      ->only("...", "...");       subset
      ->except("...", "...");     subset
      ->file(")
---------------------------------------------------------------------------------------------------
DATABASE:
  migration:
    php artisan make:migration create_tasks_table     create file in /database/migrations/

    php artisan migrate                               add a new migration
    php artisam migrate:fresh                         drop all tables and migrate
    php artisan migrate:refresh                       reset and migrate
    php artisan migrate:rollback                      undo last migration
    php artisan migrate:reset                         undo all migrations

  migration file:
    $table->increments('id');
    $table->string("title");
    $table->text("body");                             longer
    $table->boolean("completed")->default(false);     default
    $table->timestamps();

  query:
    $... = DB::table("...")->get();                   query the database

    get()
    where()
    latest()
    find()
    findOrFail()
---------------------------------------------------------------------------------------------------
TINKER:
  php artisan tinker                      CLI to interact with the application

  App\Task::all()                         show all Tasks
  App\Task::where("id", ">", 2)->get()    show specific Tasks
  App\Task::pluck("body")                 show specific field
  App\Task::pluck("body")->first()        only the first one
---------------------------------------------------------------------------------------------------
MODEL:
  one model for each database table

  /app/Project.php

  use in controller:
    $projects = \App\Project::all();

  class Project extends Model {
    protected $fillable = ["title", "description"];     only allows these fields to go through
    protected $guarded = [];                            
  }
---------------------------------------------------------------------------------------------------
ELOQUENT:
  php artisan make:model Task                           create /app/Task.php model

  web.php:
    use App\Task;                                       set namespace

    Route::get('/tasks', function () {
      $tasks = DB::table("tasks")->latest()->get();     old style

      $tasks = Task::all();                             Eloquent style

      return view('tasks.index', compact("tasks"));
    });

  php artisan make:model Task -m                        create model and migration
  adjust migration file
  php artisan migrate

  add functions to the model file

  query scopes:
    wrapper around a query
---------------------------------------------------------------------------------------------------
FORMS:
  <form method="POST" action="/">
    {{ csrf_field() }}                        cross-site protection, creates a token
    @csrf                                     blade

    {{ method_field("PATCH") }}               use for PATCH, PUT, DELETE
    @method("PATCH")                          blade

    <input ... value="{{ old("title") }}">    save data in case or error
    ...
  </form>
---------------------------------------------------------------------------------------------------
VALIDATION:
  in route function inside controller:
    request()->validate([
      "title" => ["required", "min:3"],
      "description" => ["required", "max:255"]
    ]);

    creates $errors array

    name="password_confirmed":
      "password" => "required|confirmed"      check if password and password_confirmed are equal
---------------------------------------------------------------------------------------------------
TIME DATE:
  Carbon:
    use Carbon\Carbon;

    Carbon::parse($month)->month          convert string to number

  toFormattedDateString()                 makes dates readable
  diffForHumans()                         elapsed time
---------------------------------------------------------------------------------------------------
AUTHENTICATION:
  php artisan make:auth                         creates login and register

    creates:
      /routes/web.php:
        Auth::routes();

      /resources/views/auth/...

      /app/Http/Controllers/HomeController.php
---------------------------------------------------------------------------------------------------