GENERATOR:
  creates basic express setup

  npm install -g express-generator        install
  --------------------
  folders:
    public/
    routes/
    views/
  --------------------
  commands:
    express ...                           create folder containing the app
      --view ...                          adds view engine, default jade
      --no-view                           no view engine
      --css ...                           add css engine, default none
        scss: use sass and change option in app.js

    express -h                            show help
  --------------------
  example:
    express myapp --view ejs --css sass   create app

    cd myapp
    npm install                           install modules

    DEBUG=myapp:* npm start               run app with debugging
    set DEBUG=myapp:* & npm start         run app on windows
---------------------------------------------------------------------------------------------------
USE:
  const express = require("express");
  const app = express();
---------------------------------------------------------------------------------------------------
FILES:
  app.use(express.static("public"));              search /public folder for images, css, js...
  app.use("/public", express.static("public"))    /public/... to acces the files
  app.use('/static', express.static(path.join(__dirname, 'public')))    absolute path
---------------------------------------------------------------------------------------------------
FOLDERS:
  /public/                                css, images
  /views/                                 html
  /middlewares/                           middleware
  /models/                                database access
  /controllers/                           routes
  /routes/                                routes

  process.cwd()                           directory of the node process
  __dirname                               directory of the script file
---------------------------------------------------------------------------------------------------
START:
  node ...                                launch server from file
---------------------------------------------------------------------------------------------------
INCLUDE:
  include ...                             include HMTL code from another file
---------------------------------------------------------------------------------------------------
SETUP:
  app.js:
    const express = require("express");                         enable express
    const ...                                                   enable additional packages
    const User = require("./models/user")                       enable models
    const myRoutes = require('./routes/myRoutes.js');           enable routes

    const app = express()
    const port = process.env.PORT || 3000;                      port

    connect to database                                         database

    app.use(express.static(path.join(__dirname, "dist")))       search in dist folder for css, script, ...

    app.use(...)                                                setup additional packages

    app.get('/', (req, res) => {                                initial route
      res.sendFile(path.join(__dirname, "dist/index.html"))
    })

    app.use("/...", myRoutes)                                   load routes file

    app.get('*', (req, res) => {                                fallback route
      res.sendFile(path.join(__dirname, "dist/index.html"))
    })

    app.listen(port, () => {                                    start server
      console.log(`Server running on port ${port}!`)
    })
---------------------------------------------------------------------------------------------------
MODELS:
  models/user.js:
    const mongoose              = require("mongoose");
    const passportLocalMongoose = require("passport-local-mongoose");

    const UserSchema = new mongoose.Schema({
      username: String,
      password: String,
      email: String,
      groups: [String],
      owner: [String]
    })

    UserSchema.plugin(passportLocalMongoose);

    module.exports = mongoose.model("User", UserSchema);

  app.js:
    const User = require("./models/user")
---------------------------------------------------------------------------------------------------
ROUTES:
  routes/account.js:
    const express = require("express")
    const router = express.Router()
    const User = require("../models/user");

    router.post('/login', (req, res, next) => {
      ...

    module.exports = router
---------------------------------------------------------------------------------------------------
ROUTES:
  order of routes matters
  call function when route is matched

  ROUTE:
    app.route("...")                                              multiple routes to same URL
      .get((req,res) => {...})
      .post((req,res) => {...})
      ...

  GET:
    app.get("...", (req, res) => {                                route with request and response
      res.send("...");                                            output
    });

    app.get("*", ...                                              fallback route

  POST:
    app.post("...", (req, res) => {
      res.send("...");
    });

  USE:
    app.use()                                                     runs on all requests

  LISTEN:
    app.listen(process.env.PORT, process.env.IP, () =>{           server
      console.log("Server has started.");
    });
---------------------------------------------------------------------------------------------------
REQUEST:
  req.headers                               header data of request object
  req.params                                wildcard in the url /:...
  req.body                                  form fields with GET
  req.query                                 form fields with POST, queries in the url
    ?first=firstname&last=lastname
      req.query.first
      req.query.last

  req.method
  req.path
  req.ip
---------------------------------------------------------------------------------------------------
RESPONSE:
  res.send("...")                           send text, string, object, array
  res.sendFile(...)                         send a file with absolute path
  res.json(...)                             send a json object
  res.redirect("...")                       send to website

  let absolutePath = __dirname + "relativePath/file.ext"          create absolute path
---------------------------------------------------------------------------------------------------
ROUTES PARAMETERS:
  app.get("/.../:test", function(req, res) {     :test is a wildcard
    var ... = req.params.test;
  });

  can use regexp for routes:
    ?, +, *, ()
    -, . are literal
---------------------------------------------------------------------------------------------------
REDIRECT:
  res.redirect("...");                    load route
---------------------------------------------------------------------------------------------------
RENDER:
  res.render("...");                        display a file from /views folder
  res.render("...", {name: inputData});     usually name = inputData
---------------------------------------------------------------------------------------------------
MIDDLEWARE:
  app.METHOD(path, middlewareFunction)      optional path

  express.static(path)                      setting up folders for stylesheets, scripts, images

  middlewareFunction:
    request object, response object, next function in the cycle

    app.use(function(req, res, next) {
      ...;
      next();
    })
---------------------------------------------------------------------------------------------------