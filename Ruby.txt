FILES:
  ruby file.rb                  run code from a file
---------------------------------------------------------------------------------------------------
SHELL:
  irb                           open interactive ruby shell
---------------------------------------------------------------------------------------------------
COMMANDS:
  clear                         clear bash
---------------------------------------------------------------------------------------------------
COMMENTS:
  # ...                         single line
  =begin                        multiple lines
    ...
  =end
---------------------------------------------------------------------------------------------------
LOGIC:
  <                             smaller
  >                             greater
  <=                            smaller equal
  >=                            greater equal
  ==                            equal
  !=                            not equal
  &&                            AND
  ||                            OR
  !                             NOT
---------------------------------------------------------------------------------------------------
OUTPUT:
  print                         output without linebreak
    print "\"                   create linebreak

  puts                          output with linebreak
    puts "abc" + "123"          concatenation
    puts "test #{test}"         output test and the value of variable test
---------------------------------------------------------------------------------------------------
VARIABLES:
  name = 1                      number
  name = "test"                 string
---------------------------------------------------------------------------------------------------
NUMBERS:
  20                            integer
  20.0                          float
---------------------------------------------------------------------------------------------------
STRINGS:
  name = "test"                 create string

  "test #{...}"                 insert a variable inside a string

  .length                       length of the string
  .capitalize                   make first character uppercase
---------------------------------------------------------------------------------------------------
ARRAYS:
  myArray = ["a", 1, true, [1,2]]   create array

  myArray[0]                        access to entries

  myArray << ...                    add an entry to the end
    .push(...)                      add an entry to the end, more common
    .unshift(...)                   add an entry to the front
    .shift                          remove the first entry
    .pop                            remove the last entry
    .last                           access the last entry
---------------------------------------------------------------------------------------------------
HASH:
  myHash = {test1: "...", test2: "..."}         key and value pairs
  myHash = {:test1 => "...", :test2 => "..."}   old style, hashrocket: =>
  
  myHash[:test1]                                output values of a key

  .keys                                         list of keys
  .values                                       list of values
---------------------------------------------------------------------------------------------------
IF:
  if condition                              condition can be in ()
    ...
  elsif condition
    ...
  else
    ...
  end
---------------------------------------------------------------------------------------------------
TERNARY:
  condition ? statement1 : statemment2      alternative
---------------------------------------------------------------------------------------------------
DO:
  myArray.each do |i|                       loop over array
    ...
  end

  myArray.each {                            shorthand
    |i| ...
  }

  myHash.each do |k, v|                     loop over hash, key and value
    ...
  end

  myArray.map { |i| i + 10 }                create a new array from output

  x.times do                                run the loop x times
    ...
  end
---------------------------------------------------------------------------------------------------
UNLESS:
  unless condition
    ...
  end
---------------------------------------------------------------------------------------------------
METHODS:
  def myMethod                              create method, last statement will be returned
    statement
  end

  def myMethod (argument1, argument2) 
    statement
  end

  myMethod                                  run method
  myMethod(..., ...)                        run method with arguments, () is optional
---------------------------------------------------------------------------------------------------
CLASSES:
  class myClass                             capital letter is common for class names
    attr_accessor :test                     

    def initialize(.., ..)                  optional
      @myVar = ...                          instance variable, needs @
    end

    def myMethod
      ...
    end
  end

  test = myClass.new                        create a new object
  test.myMethod

  test.inspect                              show the values of the object
---------------------------------------------------------------------------------------------------
INHERITANCE:
  class Admin < User                        Admin gets all methods from User
    def method                              method from User
      super                                 add new statements to the method
      statement
    end
  end
  admin_user = Admin.new("Jane", "Smith")
  puts admin_user.inspect
  admin_user.say_name
---------------------------------------------------------------------------------------------------
USEFUL METHODS:
  Math.sqrt(...)                            square root