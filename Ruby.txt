FILES:
  ruby file.rb                  run code from a file
---------------------------------------------------------------------------------------------------
COMMANDS:
  irb                           open interactive ruby shell
    clear
    exit
  --------------------
  ruby ...                      open file
  ruby -v                       version
  --------------------
  rvm:
    rvm list known
    rvm install ruby-2.4.2
  --------------------
  gem:
    gem search ...              search gem
    gem install ...             install gem with dependencies
    gem uninstall ...           uninstall gem
    gem list                    show installed gem
    gem server                  show doc for installed gems in browser
    gem fetch ...               download gem without installing
    gem unpack ...              extract gem

    ri ...                      show doc for installed gem
---------------------------------------------------------------------------------------------------
COMMENTS:
  # ...                         single line
  
  =begin                        multiple lines
    ...
  =end
---------------------------------------------------------------------------------------------------
OUTPUT:
  print ...                     without linebreak
  printf ...                    with format
  puts ...                      with linebreak, converts to string first
---------------------------------------------------------------------------------------------------
INPUT:
  gets                          read input including enter
  gets.chomp                    cuts of enter
---------------------------------------------------------------------------------------------------
DATA TYPES:
  everything is an object
  .class                        check data type
  --------------------
  number
    integer
      Bignum
      Fixnum
    float
  boolean
  string
  hash
  array
  symbol
  --------------------
  nil                           empty value
---------------------------------------------------------------------------------------------------
VARIABLES:
  string_case_is_used

  assignment:
    my_var = ...

  constant:
    MY_CONST = ...              warning for changes
---------------------------------------------------------------------------------------------------
SCOPE:
  local                         method
  instance                      instance, @...
  class                         class, @@...
  global                        everything, $...
---------------------------------------------------------------------------------------------------
CONVERSION:
  .to_s                         to string
  .to_i                         to integer, round down, until isnt possible and stops there, or zero
  .to_f                         to float
  .to_a                         to array
  .to_sym                       to symbol
---------------------------------------------------------------------------------------------------
COMPARISON:
  <                             smaller
  >                             greater
  <=                            smaller equal
  >=                            greater equal
  ==                            equal
  !=                            not equal
  --------------------
  comparing strings:
    z > a
    A > a
    Z > A
---------------------------------------------------------------------------------------------------
LOGIC:
  &&                            and
  and

  ||                            or
  or

  !                             not
  not
---------------------------------------------------------------------------------------------------
ARITHMETIC:
  +
  -
  *
  /
  **                            exponent
  %                             modulus
---------------------------------------------------------------------------------------------------
BOOLEAN:
  true:
    0
  
  false:
    nil
---------------------------------------------------------------------------------------------------
NUMBERS:
  integer:
    20
    9/2 = 4

  float:
    20.0
    9/2 = 4.5

  format:
    "%02d", 5 == "05"             d: integer, 0: lead with zeros, 2: take up 2 characters

  random:
    rand                          float from including 0.0 to excluding 1.0
    rand(x)                       integer from including 0 to excluding x

    srand x                       enter a seed, following random numbers stay the same for this seed
    rand

  math:
    Math::PI                      pi
    Math::E                       e
    Math.sin(...)                 sin
    Math.cos(...)                 cos
    Math.tan(...)                 tan
    Math.log(...)                 log
    Math.sqrt(...)                root
---------------------------------------------------------------------------------------------------
STRINGS:
  declaration:
    my_string = "..."             create string
    my_string = '...'

  substring:
    my_string[0..4]               substring
    my_string[-4..-1]             substring, negative numbers are counting from the back

  interpolation:
    "... #{my_var}"               insert a variable/code inside a string

  concatenation:
    "..." + my_string + "..."
    "..." * x                     repeat string x times

  methods:
    .length                       length of string
    .size                         alternative

    .count("...")                 count listed characters
    .count("^...")                count not listed characters
    .include?("...")              check if contains string
    .start_with?("...")           check if starts with string
    .index("...", ...)            return index of first occurence, optional start
    .equal?("...")                check if equal

    .capitalize                   first character upper case
    .downcase                     all lower case
    .upcase                       all upper case
    .swapcase                     alternate upper and lower

    .lstrip                       remove whitespace at the start
    .rstrip                       remove whitespace at the end
    .strip                        remove whitespace at start and end

    .chop                         remove last character
    .chomp("...")                 remove specified last characters
    .delete("...")                remove all specified characters

    .split                        split into array at spaces
    .split("...")                 split at characters

    .sub("...","...")             find and replace first
    .gsub("...","...")            find and replace all

    .center(..., "...")           center string, line length, fill character
    .ljust(..., "...")            align left, line length, fill character
    .rjust(..., "...")            align right, line length, fill character

  new line:
    \n

  escape character:
    \...
    \\
    \'
---------------------------------------------------------------------------------------------------
SYMBOLS:
  :my_symbol                      stored only once, referenced, saves data

  a simple string, its name is the value
---------------------------------------------------------------------------------------------------
ARRAYS:
  declaration:
    my_array = ["a", 1, true, [1,2]]    create array
  --------------------
  entries:
    my_array[0]                         access to entries
    my_array[0, 2]                      array with two elements from index 0
  --------------------
  methods:
    .length                         number of elements
    .size                           alternative

    .push(..., ...)                 add entries to end, return array
    .unshift(..., ...)              add entries to front, return array
    .shift                          remove and return first element
    .shift(...)                     remove number of entries, return array
    .pop                            remove and return last element
    .pop(...)                       remove number of entries, return array
    .concat(...)                    add array to the end, return array

    .first                          return first element
    .last                           return last element
    .max                            return highest element
    .include?(...)                  return true if element exists
    .values_at(..., ...)            return array with elements at indexes
    .count(...)                     return number of found elements
    .empty?                         return true if empty array

    .sort                           sort lowest to highest
    .shuffle                        randomize order

    .join("...")                    create string with given seperation

    .collect {|x| ...}              run block once for each entry

    .lines                          split into lines
    .bytes
    .chars
---------------------------------------------------------------------------------------------------
HASH:
  key-value pairs
  --------------------
  declaration:
    my_hash = Hash.new(0)                         create hash
  
    my_hash = {test1: "...", test2: "..."}        key and value pairs
    my_hash = {"..." => "...", "..." => "..."}    alternative, hashrocket
  --------------------
  access:
    my_hash[:...]                                 get value of key
    my_hash[:...] = ...                           create pair
  --------------------
  methods:
    .keys                                         list of keys
    .values                                       list of values
    .length                                       amount of pairs

    .delete(:...)                                 remove pair and return value

    .has_key?(:...)                               return true if key exists
    .has_value?(...)                              return true is value exists
    .empty?                                       return true if empty
    .size                                         return number of pairs

    .update(...)                                  overwrite with new hash
    .merge(...)                                   merge with new hash
---------------------------------------------------------------------------------------------------
ENUMERABLES:
  iterable special class
  --------------------
  class My_enum
    include Enumerable

    def each
      yield "..."
      yield "..."
    end
  end

  enum_inst = My_enum.new

  enum_inst.each do |i|
    ...
  end
---------------------------------------------------------------------------------------------------
CLASS:
  class:
    class My_class
      attr_accessor :..., :...        getter and setter

      def initialize                  called at creation
        @... = ...
      end

      def get_name                    getter alternative
        @name
      end

      def set_name(new_name)          setter alternative
        @name = new_name
      end

      def my_method                   method
        @var                          local instance variable
        ...
      end
    end
  --------------------
  instance:
    my_instance = My_class.new        create instance

    my_instance.my_method             call method on instance
  --------------------
  inheritance:
    class My_sub_class < My_class     inherit everything from parent
      def my_method                   override methods
        ...
      end
    end
  --------------------
  @...                                instance variable
  @@...                               class variable
---------------------------------------------------------------------------------------------------
MODULES:
  My_module.rb:
    module My_module                  create module
      attr_accessor :name, :...

      def my_method
        puts self.name
      end
    end
  --------------------
  import with filename:
    require "my_module"               for gems
    require_relative "my_module"      relative path to current file
  --------------------
  import in class:
    include My_module                 import methods into class
---------------------------------------------------------------------------------------------------
CONDITION:
  if:
    if condition                      condition can be in ()
      ...
    elsif condition
      ...
    else
      ...
    end
  
    ... if condition                  alternative
  --------------------
  unless:
    unless condition
      ...
    else
      ...
    end
  --------------------
  case:
    case ...                          expression
    when ..., ...                     multuiple conditions
      ...
      exit
    when ...                          condition
      ...
      exit
    else                              default
      ...
    end
---------------------------------------------------------------------------------------------------
TERNARY:
  condition ? statement1 : statemment2          alternative
---------------------------------------------------------------------------------------------------
LOOPS:
  for:
    for i in ...                                for, array, range, ...
      ...
    end
  --------------------
  while:
    while ... do                                while
      ...
    end
  --------------------
  loop:
    loop do                                     loop
      ...
    end
  --------------------
  until:
    until ...                                   until
      ...
    end
  --------------------
  break ...                                     stop the loop, optional condition
  next ...                                      jump to next iteration, optional condition
  --------------------
  .times:
    x.times do                                  loop x times
      ...
    end

    x.times do |i|                              loop x times with counter
      ...
    end
  --------------------
  .each:
    my_array.each do |i|                        loop over array with counter
      ...
    end

    my_hash.each do |key, value|                loop over hash with counters
      ...
    end

    myArray.each {                              shorthand
      |i| ...
    }
  --------------------
  .map:
    my_array.map { |i| i + 10 }                 create a new array from output
---------------------------------------------------------------------------------------------------
FUNCTIONS:
  functions always return the value of the last expression
  --------------------
  declaration:
    def my_func
      ...
      return ...                            optional return
    end

    def my_method(..., ...)                 with arguments, () not necessary
    def my_method(*...)                     with variable number of arguments
    def my_method(...=...)                  with default value, can be overwritten in call
  --------------------
  calling:
    my_method                               run function
    my_method(..., ...)                     run function with arguments, () is optional
  --------------------
  ...!                                      change variable directly
  ...?                                      return true or false, convention
---------------------------------------------------------------------------------------------------
EXCEPTIONS:
  begin
    ...                                     expression
  rescue
    ...                                     runs on error
    exit
  end
  --------------------
  def ...
    raise my_error, ..., unless ...
  end

  begin
    ...
  rescue my_error
    ...
  end
---------------------------------------------------------------------------------------------------
PROC:
  declaration:
    my_proc = Proc.new do |...|             with parameter |...|
      ...
    end
  --------------------
  calling:
    my_proc.call "..."                      with parameter "..."
  --------------------
  steps:
    define method
    make proc
    call method with proc
---------------------------------------------------------------------------------------------------
BLOCK:
  def my_block(&block)
    block.call
    block.call
  end

  my_block do
    ...
  end

  alternative:
    def my_block
      yield
      yield
    end

    my_block do
      ...
    end
---------------------------------------------------------------------------------------------------
MATH:
  Math.sqrt(...)                            square root
---------------------------------------------------------------------------------------------------
FILES:
  create:
    myFile = File.new("...", "w")

  write:
    myFile.puts("...")

  close:
    myFile.close                            required after write

  read:
    myFile = File.read("...")

  load "..."                                execute file

  File.open("...") do |i|
    ...
  end
---------------------------------------------------------------------------------------------------
TIME:
  Time.new                                        current time
  Time.mktime(year, month, day, hour, minute)     specific time, one or more entries, rest are 0

  my_time + x                                     add seconds
---------------------------------------------------------------------------------------------------