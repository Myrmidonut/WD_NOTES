  ruby file.rb    run code
-----
COMMENTS:
  #               single line
  =begin          multiple lines
    ...
  =end
-----
LOGIC:
  <               smaller
  >               greater
  <=              smaller equal
  >=              greater equal
  ==              equal
  !=              not equal
  &&              true if both true
  ||              true if either one true
  !               negation
-----
STRINGS:
  name = "test"   string creation
  .length         length of the string
  .capitalize     makes string uppercase
-----
ARRAYS:
  test = ["a", 1, true, [1,2]]
  test[0]                       access to entries
  test << "..."                 adds an entry to the end
  .push("...")                  adds an entry to the end
  .unshift                      adds an entry to the front
  .shift                        removes the first entry
  .pop                          removes the last entry
  .last                         accesses the last entry
-----
HASH:
  name = {:test1 => "...", :test2 => "..."}   keys and values, hashrockets
  name = {test1: "...", test2: "..."}         new version
  name[:test1]                                outputs values of a key
  .keys                                       list of keys
  .values                                     list of values
-----
OUTPUT:
  print                     output without linebreak
    print "\"               creates linebreak
  puts                      output with linebreak
    puts "abc" + "123"      concatenation
    puts "test #{test}"     outputs test and the value of variable test
                            puts outputs each entry in one line
-----
IF:
  if condition              condition can be in ()
    ...
  elseif condition
    ...
  else
    ...
  end

  condition ? statement1 : statemment2
-----
DO:
  .each do |i|      
    ...
  end

  .each {
    |i| ...
  }

  .map { |i| i + 10 }         creates a new array

  x.times do                  runs the loop x times
    ...
  end
-----
UNLESS:
  unless condition
    ...
  end
-----
MEHTODS:
  def name                    create the method
    statement1
    statement2
  end

  def name (argument1, argument2) 
    statement
  end

  name                        runs the method
  name(..., ...)              runs the method with arguments, () is optional
-----
CLASSES:
  class Name                  capital letter is common for class names
    attr_accessor :test   
    def initialize(.., ..)    optional
      @test                   instance variable, needs @
    end
    def method
      ...
    end
  end

  test = Name.new              creates a new object
  test.method

  test.inspect                 shows the values of the object
-----
INHERITANCE:
  class Admin < User                        Admin gets all methods from User
    def method                              method from User
      super                                 adds new statements to the method
      statement
    end
  end
  admin_user = Admin.new("Jane", "Smith")
  puts admin_user.inspect
  admin_user.say_name