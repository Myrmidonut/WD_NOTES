INSTALLATION:
  npm install -g @angular/cli
---------------------------------------------------------------------------------------------------
NEW PROJECT:
  ng new ...                  create new project      
---------------------------------------------------------------------------------------------------
STRUCTURES:
  ng generate modules ...     create modules
  ng generate component ...   create component
  ...
---------------------------------------------------------------------------------------------------
SERVE:
  ng serve                    preview app in debug mode         
  ng serve --prod             preview app in production mode
    --open                    launch in browser
    -o
  
  http://localhost:4200/      local server address
---------------------------------------------------------------------------------------------------
BUILD:
  ng build                    write app in debug mode
    /dist
  ng build --prod             write app for production, reduced filesize
    /dist

  options:
    --port ...                set port
    --host ...                set ip, default: localhost
---------------------------------------------------------------------------------------------------
MEAN:
  ng new ...
  npm install --save express
  create app.js with project name
  ng build
  node app.js (run page with backend)
  ng serve (run just frontend with watching changes)

  app.js:
    const express = require('express')
    const path    = require("path")

    const app = express()
    const port = 3000

    app.use(express.static(path.join(__dirname, "dist/my-app")))

    app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, "dist/my-app/index.html"))
    })

    app.listen(port, () => console.log(`Server running on port ${port}!`))
---------------------------------------------------------------------------------------------------
FILES AND FOLDERS:
  e2e                         end to end testing
  
  node_modules                dependencies
  
  src                         source code
  src/app                     folders for components, etc.
  src/assets                  images, fonts, etc.
  src/environments            environment variables
  src/index.html              app root
  src/main.ts                 entry point for app
  src/polyfills.ts            polyfills
  src/styles.css              global css
  src/test.ts                 testing
  src/tsconfig.app.json       typescript config
  src/tsconfig.spec.json      typescript testing config

  .angular-cli.json           angular-cli config
  .gitignore                  excludes for git
  karma.conf.js               Jasmine and Karma testing config
  package.json                dependencies
  protactor.conf.js           protactor testing config
  tsconfig.json               typescript 
---------------------------------------------------------------------------------------------------
COMPONENTS:
  ng generate component ...                               create component

  files:
    TypeScript                                            logic
      example.component.ts
    HTML                                                  view
      example.component.html
    CSS                                                   style
      example.component.css

  TypeScript:
    import { Component, OnInit } from "@angular/core";    content

    @Component({                                          decorator
      selector: "app-example",                            component selector
      templateUrl: "./example.component.html",            component template
      styleUrls: ["./example.component.css"]              component css
    })

    export class ExampleComponent {
      constructor () { }                                  constructor
      ngOnInit() { }                                      lifecycle-hook
      ...                                                 custom functions
    }

  HTML:
    <p>
      ...
    </p>

  CSS:
    p {
      ...;
    }
---------------------------------------------------------------------------------------------------
DATA-BINDING:
  use data from the logic in the view

  {{...}}                                                         binding from the logic
  
  HTML:                                                           property binding
    <button [title]="color">...</button>                          typescript
    <button title="{{color}}">...</button>                        javascript

  TS:
    constructor() {
      this.color = this.generateRandomColor();
    }

    generateRandomColor() {
      return "#" + (Math.random() * 0xFFFFFF << 0).toString(16);
    }

    public color: string;
---------------------------------------------------------------------------------------------------
TWO-WAY-BINDING:
  data flows from view to logic and back
  needs to be enabled:
    app.module.ts
      import { FormsModule } from "@anguler/forms";     import
      
      imports: [
        FormsModule
      ]

  [(ngModel)]="..."                                     binding
---------------------------------------------------------------------------------------------------
PIPES:
  {{... | ...}}                                         modify bindings using pipe operator
    uppercase
---------------------------------------------------------------------------------------------------
DIRECTIVES:
  repeat:
    <li *ngFor="let hero of heroes">                    loop over heroes
      {{hero.name}}
    </li>

      *ngFor="let hero of heroes; let i = index"        loop with index

  condition:
    <li *ngIf="selectedHero">...</li>                   display if true
---------------------------------------------------------------------------------------------------
EVENTS:
  <li (click)="...()">                                  execute function on click

  event types:
    (focus)
    (blur)
    (submit)
    (scroll)

    (cut)
    (copy)
    (paste)

    (keydown)
    (keypress)
    (keyup)

    (mouseenter)
    (mousedown)
    (mouseup)

    (click)
    (dblclick)

    (drag)
    (dragover)
    (drop)
---------------------------------------------------------------------------------------------------
STYLING:
  class:
    single:
      <h1 [class.gray]="grayStyle">...</h1>                     if grayStyle is true add class gray

    multiple:
      <h1 [ngClass]="{
        'gray': grayStyle,
        'large': !grayStyle
      }">...</h1>
  --------------------
  style:
    single:
      <h1 [style.color]="grayStyle ? 'gray' : 'black'>...</h1>

    multiple:
      <h1 [ngStyle]="{
        'color': grayStyle ? 'gray' : 'black',
        'font-size': !grayStyle ? '1em' : '4em'
      }">...</h1>
---------------------------------------------------------------------------------------------------
ROUTING:
  <a routerLink="..." name="...">...</a>                                         link

  app-routing.module.ts:
    import { HomeComponent } from "./home/home.component";            import component
    import { ContactComponent } from "./contact/contact.component";

    const routes: Routes = [
      { path: "", component: HomeComponent, outlet: "..." },                         connect route and component
      { path: "contact", component: ContactComponent }
    ];
---------------------------------------------------------------------------------------------------
SERVICES:
  allow code to be accessed from different components

  ng generate service data                                 create service

  data.service.ts:
    export class DataService {
      myFunction() {                                       add function, etc.
        return console.log("first clicked");
      }
    }

  home.component.ts:
    import { DataService } from "../data.service";        import service

    constructor(private data: DataService) { }            make data available

    firstClick() {
      this.data.myFunction();                             access function
    }
---------------------------------------------------------------------------------------------------
HTTP CLIENT:
  app.module.ts:
    import { HttpClientModule } from "@angular/common/http";      import

    imports: [
      HttpClientModule                                            add to imports
    ]

  data.service.ts:
    import { HttpClient } from "@angular/common/http";            import

    constructor(private http: HttpClient) { }                     make http available

    getUsers() {
      return this.http.get("https://reqres.in/api/users")         make get request
    }
---------------------------------------------------------------------------------------------------
LIFECYCLE HOOKS:
  ngOnInit                        on component load
---------------------------------------------------------------------------------------------------
FORMS:
  two approaches:
    template driven
    reactive                      more control

    reactive:
      import in app.module.ts
      import and use in component

      FormControl                       control one input field
      FormGroup                         control one form
      FormBuilder                       easier control, control() group() array()
      Validator                         validate inputs

  Example:
    app.module.ts:
      import { ReactiveFormsModule } from "@angular/forms";                   import

      imports: [
        ReactiveFormsModule                                                   add to imports
      ]
    
    contact.component.ts:
      import { FormBuilder, FormGroup, Validators } from "@angular/forms";    import

      messageForm: FormGroup;
      submitted = false;
      success = false;

      constructor(private formBuilder: FormBuilder) {                         make formbuilder available
        this.messageForm = this.formBuilder.group({                           setup form data
          name: ["", Validators.required],
          message: ["", Validators.required]
        })
      }

      onSubmit() {                                                            submit function
        this.submitted = true;
        if (this.messageForm.invalid) {
          return;
        }
        this.success = true;
      }

    contact.component.html:
      <form [formGroup]="messageForm" (ngSubmit)="onSubmit()">                create form
        <h5 *ngIf="success">Your form is valid!</h5>
        <label>
          Name:
          <input type="text" formControlName="name">
          <div *ngIf="submitted && messageForm.controls.name.errors" class="error">
            <div *ngIf="messageForm.controls.name.errors.required">
              Your name is required.
            </div>
          </div>
        </label>
        <label>
          Message:
          <input type="text" formControlName="message">
          <div *ngIf="submitted && messageForm.controls.message.errors" class="error">
            <div *ngIf="messageForm.controls.message.errors.required">
              A message is required.
            </div>
          </div>
        </label>
        <input type="submit" value="Send message" class="cta">
      </form>
      <div *ngIf="submitted" class="results">
        <strong>Name:</strong>
        <span>{{ messageForm.controls.name.value }}</span>
        <strong>Message:</strong>
        <span>{{ messageForm.controls.message.value }}</span>
      </div>
---------------------------------------------------------------------------------------------------
DEPENDENCY INJECTION:
  add imports to constructor()