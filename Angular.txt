INSTALLATION:
  npm install -g @angular/cli             install
  npm install -g @angular/cli@latest      update
---------------------------------------------------------------------------------------------------
OVERVIEW:
  TypeScript                  JavaScript extension
  components                  building blocks
  services                    sharing data between components
  modules                     add functionality
  observables                 
---------------------------------------------------------------------------------------------------
NEW PROJECT:
  ng new ...                  create new project
---------------------------------------------------------------------------------------------------
STRUCTURES:
  ng generate modules ...     create modules
  ng generate component ...   create component
  ...
---------------------------------------------------------------------------------------------------
SERVE:
  ng serve                    preview app in debug mode         
  ng serve --prod             preview app in production mode
    --open                    launch in browser
    -o
  
  http://localhost:4200/      local server address
---------------------------------------------------------------------------------------------------
BUILD:
  ng build                    write app in debug mode, to /dist
    --prod                    production, reduced filesize, to /dist
    --aot                     faster page load
    --output-path dist        specify folder

  options:
    --port ...                set port
    --host ...                set ip, default: localhost
---------------------------------------------------------------------------------------------------
TEST:
  ng test                     unit tests via Karma
  ng e2e                      end-to-end tests via Protractor
---------------------------------------------------------------------------------------------------
HELP:
  ng help
---------------------------------------------------------------------------------------------------
EXPRESS:
  ng new ...
  npm install --save express
  create app.js with project name
  ng build
  node app.js (run page with backend)
  ng serve (run just frontend with watching changes)

  app.js:
    const express = require('express')
    const path    = require("path")

    const app = express()
    const port = 3000

    app.use(express.static(path.join(__dirname, "dist")))

    app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, "dist/index.html"))
    })

    app.listen(port, () => console.log(`Server running on port ${port}!`))
---------------------------------------------------------------------------------------------------
FILES AND FOLDERS:
  e2e                         end to end testing
  
  node_modules                dependencies
  
  src                         source code
  src/app                     folders for components, etc.
    app.module.ts             lists all components
    app-routing.module.ts     lists names for components used for routing
  src/assets                  images, fonts, favicons, etc.
  src/environments            environment variables
  src/index.html              app root
  src/main.ts                 entry point for app
  src/polyfills.ts            polyfills
  src/styles.css              global css
  src/test.ts                 testing
  src/tsconfig.app.json       typescript config
  src/tsconfig.spec.json      typescript testing config

  .angular-cli.json           angular-cli config
  .gitignore                  excludes for git
  karma.conf.js               Jasmine and Karma testing config
  package.json                dependencies
  protactor.conf.js           protactor testing config
  tsconfig.json               typescript 
---------------------------------------------------------------------------------------------------
COMPONENTS:
  ng generate component ...                               create component

  /src/app/...                                            component folder
  --------------------
  files:
    TypeScript                                            logic
      example.component.ts
    HTML                                                  view
      example.component.html
    CSS                                                   style
      example.component.css
  --------------------
  TypeScript:
    import { Component, OnInit } from "@angular/core";    content

    @Component({                                          decorator
      selector: "app-example",                            component selector
      templateUrl: "./example.component.html",            component template
      styleUrls: ["./example.component.css"]              component css
    })

    export class ExampleComponent {
      constructor () { }                                  constructor
      ngOnInit() { }                                      lifecycle-hook
      ...                                                 custom functions
    }
  --------------------
  HTML:
    <p>
      ...
    </p>
  --------------------
  CSS:
    p {
      ...;
    }
---------------------------------------------------------------------------------------------------
INTERPOLATION:
  use data from the logic in the view

  {{ ... }}                                                       comes from the logic
  --------------------
  HTML:                                                           property binding
    <button [title]="color">...</button>                          typescript
    <button title="{{ color }}">...</button>                      javascript
  --------------------
  TS:
    public color: string = "green"
---------------------------------------------------------------------------------------------------
PIPES:
  {{ myVar | ... }}                                     modify bindings using pipe operator
    uppercase
    lowercase
    date
    ...
---------------------------------------------------------------------------------------------------
DIRECTIVES:
  loop:
    <li *ngFor="let hero of heroes; index as i">        loop with optional index
      {{ hero }} {{ i }}
    </li>
  --------------------
  condition:
    <li *ngIf="selectedHero === 1">...</li>             display if true
---------------------------------------------------------------------------------------------------
LIFECYCLE HOOKS:
  ngOnInit()                                            on component load
  ngOnChanges(changes: SimpleChanges)                   on input changes
  ngOnDestroy()                                         on component destuction
  ...
---------------------------------------------------------------------------------------------------
EVENTS:
  <li (click)="...()">                                  execute function on click

  event types:
    (focus)
    (blur)
    (submit)
    (scroll)

    (cut)
    (copy)
    (paste)

    (keydown)
    (keypress)
    (keyup)

    (mouseenter)
    (mousedown)
    (mouseup)

    (click)
    (dblclick)

    (drag)
    (dragover)
    (drop)
---------------------------------------------------------------------------------------------------
STYLING:
  /src/styles.scss                                global stylesheet
  /src/app/component1/component.scss              local stylesheet
  --------------------
  class:
    single:
      <h1 [class.gray]="grayStyle">...</h1>        applies .gray if grayStyle is true

    multiple:
      <h1 [ngClass]="{
        'gray': grayStyle,
        'large': !grayStyle
      }">...</h1>
  --------------------
  inline:
    single:
      <h1 [style.color]="grayStyle ? 'gray' : 'black'>...</h1>

    multiple:
      <h1 [ngStyle]="{
        'color': grayStyle ? 'gray' : 'black',
        'font-size': !grayStyle ? '1em' : '4em'
      }">...</h1>
---------------------------------------------------------------------------------------------------
ROUTING:
  link:
    <a routerLink="..." name="...">...</a>                              link
  --------------------
  routes:
    app-routing.module.ts:
      import { HomeComponent } from "./home/home.component";            import component
      import { ContactComponent } from "./contact/contact.component";

      const routes: Routes = [
        { path: "", component: HomeComponent, outlet: "..." },          connect route and component
        { path: "contact", component: ContactComponent }
      ];
  --------------------
  redirect:
    import { Router } from "@angular/router";                           import

    constructor(private router: Router) {}                              enable

    this.router.navigate(["/join"])                                     redirect
---------------------------------------------------------------------------------------------------
SERVICES:
  allow code to be accessed from different components

  ng generate service data                                  create service
  --------------------
  data.service.ts:
    export class DataService {
      myFunction() {                                        add function, etc.
        return console.log("first clicked");
      }
    }
  --------------------
  home.component.ts:
    import { DataService } from "../data.service";          import service

    constructor(private data: DataService) { }              make data available
      private
      public                                                public if html template needs access

    firstClick() {
      this.data.myFunction();                               access function
    }
---------------------------------------------------------------------------------------------------
MODULES:
  enables more features for components

  app.module.ts
    import { ... } from "...";

    imports: [
      ...
    ]

  examples:
    { AppRoutingModule } from "./app-routing.module"
    { HttpClientModule } from "@angular/common/http"
    { ReactiveFormsModule } from "@angular/forms"
---------------------------------------------------------------------------------------------------
HTTP CLIENT:
  app.module.ts:
    import { HttpClientModule } from "@angular/common/http";      import

    imports: [
      HttpClientModule                                            add to imports
    ]
  --------------------
  component:
    import { HttpClient } from "@angular/common/http";
    import { HttpHeaders } from '@angular/common/http';

    const httpOptions = {
      headers: new HttpHeaders({
        "Content-Type": "application/x-www-form-urlencoded"
      })
    }

    export class ... implements OnInit {
      constructor(private httpClient: HttpClient) { }

      post() {
        let body = new URLSearchParams()
        body.set("username", formdata.username)

        this.httpClient.post<{                                    post
          status: string,                                         returned data
          groups: [string]
          }>("...", body.toString(), httpOptions)
        .subscribe(res => {
          ...
        }
      }
    }

    get() {
      return this.http.get("...")                                 get
    }
---------------------------------------------------------------------------------------------------
FORMS:
  two approaches:
    template driven
    reactive                            more control

    reactive:
      import in app.module.ts
      import and use in component

      FormControl                       control one input field
      FormGroup                         control one form
      FormBuilder                       easier control, control() group() array()
      Validator                         validate inputs
  --------------------
  Example:
    app.module.ts:
      import { ReactiveFormsModule } from "@angular/forms";                   import

      imports: [
        ReactiveFormsModule                                                   add to imports
      ]
    --------------------
    contact.component.ts:
      import { FormBuilder, FormGroup, Validators } from "@angular/forms";    import

      messageForm: FormGroup;                                                 create new formgroup
      submitted = false;
      success = false;

      constructor(private formBuilder: FormBuilder) {                         make formbuilder available
        this.messageForm = this.formBuilder.group({                           setup form data
          name: ["", Validators.required],                                    formfield with default value and validation
          message: ["", Validators.required]
        })
      }

      onSubmit() {                                                            submit function
        this.submitted = true;                                                if submitted
        if (this.messageForm.invalid) {                                       if invalid
          return;
        }
        this.success = true;                                                  if valid
      }
    --------------------
    contact.component.html:
      <form [formGroup]="messageForm" (ngSubmit)="onSubmit()">                create form
        <h5 *ngIf="success">Your form is valid!</h5>

        <label>
          Name:
          <input type="text" formControlName="name">
          <div *ngIf="submitted && messageForm.controls.name.errors" class="error">
            <div *ngIf="messageForm.controls.name.errors.required">
              Your name is required.
            </div>
          </div>
        </label>

        <label>
          Message:
          <input type="text" formControlName="message">
          <div *ngIf="submitted && messageForm.controls.message.errors" class="error">
            <div *ngIf="messageForm.controls.message.errors.required">
              A message is required.
            </div>
          </div>
        </label>

        <input type="submit" value="Send message" class="cta">
      </form>

      <div *ngIf="submitted" class="results">
        <strong>Name:</strong>
        <span>{{ messageForm.controls.name.value }}</span>
        <strong>Message:</strong>
        <span>{{ messageForm.controls.message.value }}</span>
      </div>
    </form>
---------------------------------------------------------------------------------------------------
TWO-WAY-BINDING:
  data flows from view to logic and back
  needs to be enabled:
    app.module.ts
      import { FormsModule } from "@anguler/forms";     import
      
      imports: [
        FormsModule
      ]

  [(ngModel)]="..."                                     binding
---------------------------------------------------------------------------------------------------
DEPENDENCY INJECTION:
  add imports to constructor()
---------------------------------------------------------------------------------------------------
STUFF:
  #myInput>{{ myInput.focus() }}
---------------------------