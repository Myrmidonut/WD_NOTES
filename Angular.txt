INSTALLATION:
  npm install -g @angular/cli
---------------------------------------------------------------------------------------------------
NEW PROJECT:
  ng new ...                  create new project      
---------------------------------------------------------------------------------------------------
STRUCTURES:
<<<<<<< HEAD
  ng g modules ...            create module
  ng g component ...          create component
=======
  ng generate modules ...     create modules
  ng generate component ...   create component
>>>>>>> 8192ea1ffb5844b967918d778b89ce9266251831
  ...
---------------------------------------------------------------------------------------------------
BUILD:
  ng serve                    preview app in debug mode         
  ng serve --prod             preview app in production mode
    --open                    launch in browser
    -o

  ng build                    write app in debug mode
  ng build --prod             write app for production

  options:
    --port ...                set port
    --host ...                set ip, default: localhost
---------------------------------------------------------------------------------------------------
MEAN:
  ng new ...
  npm install --save express
  create app.js
  node app.js

  app.js:
    const express = require('express')
    const path    = require("path")

    const app = express()
    const port = 3000

    app.use(express.static(path.join(__dirname, "dist/my-app")))

    app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, "dist/my-app/index.html"))
    })

    app.listen(port, () => console.log(`Server running on port ${port}!`))
---------------------------------------------------------------------------------------------------
FILES AND FOLDERS:
  e2e                         end to end testing
  
  node_modules                dependencies
  
  src                         source code
  src/app                     folders for components, etc.
  src/assets                  images, fonts, etc.
  src/environments            environment variables
  src/index.html              app root
  src/main.ts                 entry point for app
  src/polyfills.ts            polyfills
  src/styles.css              global css
  src/test.ts                 testing
  src/tsconfig.app.json       typescript config
  src/tsconfig.spec.json      typescript testing config

  .angular-cli.json           angular-cli config
  .gitignore                  excludes for git
  karma.conf.js               Jasmine and Karma testing config
  package.json                dependencies
  protactor.conf.js           protactor testing config
  tsconfig.json               typescript 
---------------------------------------------------------------------------------------------------
COMPONENTS:
  ng generate component ...                               create component

  files:
    TypeScript                                            logic
      example.component.ts
    HTML                                                  view
      example.component.html
    CSS                                                   style
      example.component.css

  TypeScript:
    import { Component, OnInit } from "@angular/core";    content

    @Component({                                          decorator
      selector: "app-example",                            component selector
      templateUrl: "./example.component.html",            component template
      styleUrls: ["./example.component.css"]              component css
    })

    export class ExampleComponent {
      constructor () { }                                  constructor
      ngOnInit() { }                                      lifecycle-hook
      ...                                                 custom functions
    }

  HTML:
    <p>
      ...
    </p>

  CSS:
    p {
      ...;
    }
---------------------------------------------------------------------------------------------------
DATA-BINDING:
  use data from the logic in the view

  {{...}}                                       binding from the logic
  
  HTML:
    <button title="{{color}}">      
      {{color}}
    </button>

    [title]="color"                             alternative

  TS:
    constructor() {
      this.color = this.generateRandomColor();
    }

    generateRandomColor() {
      return "#" + (Math.random() * 0xFFFFFF << 0).toString(16);
    }

    public color: string;
---------------------------------------------------------------------------------------------------
TWO-WAY-BINDING:
  data flows from view to logic and back
  needs to be enabled:
    app.module.ts
      import { FormsModule } from "@anguler/forms";     import
      
      imports: [
        FormsModule
      ]

  [(ngModel)]="..."                                     binding
---------------------------------------------------------------------------------------------------
PIPES:
  {{... | ...}}                           modify bindings using pipe operator
    uppercase
---------------------------------------------------------------------------------------------------
DIRECTIVES:
  repeat:
    <li *ngFor="let hero of heroes">      loop over heroes
      {{hero.name}}
    </li>

  condition:
    <li *ngIf="selectedHero">...</li>     display if true
---------------------------------------------------------------------------------------------------
EVENTS:
  <li (click)="...">                      execute function on click
---------------------------------------------------------------------------------------------------
CLASSES:
  [class.selected]="hero === selectedHero"    if hero = selectedHero add class selected