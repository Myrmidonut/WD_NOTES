VERSIONS:
  PHP 7
---------------------------------------------------------------------------------------------------
COMPOSER:
  composer.json:
    {
      "autoload": {
        "classmap": [               load every class from that path
          "controllers/"            specific folder
          "./"                      everything
        ]
      }
    }

  composer install                  load dependencies, create vendor/composer/

  index.php:
    require "vendor/autoload.php";  add require

  core/bootstrap.php:
    // require "core/Router.php";   comment require

  rebuild:
    composer dump-autoload
---------------------------------------------------------------------------------------------------
LOCAL WEBSERVER:
  php -S localhost:8000             run build-in webserver from php main folder
      -t foldername                 specific sub folder
      -c php.inside                 specific ini file
---------------------------------------------------------------------------------------------------
FILES:
  index.php                         main page
  php.ini                           for errors, don't use in final

  seperate concerns:
    index.view.php                  html

    index.php                       php
      ...
      require "index.view.php";
---------------------------------------------------------------------------------------------------
PHP STATUS:
  phpinfo();
---------------------------------------------------------------------------------------------------
INCLUDING FILES:
  require "file.php";               import local file, stop on error
  include "file.php";               import local file, warning on error

  file_get_contents("http://...");  import website

  bootstrap:
    bootstrap.php
      require "...";
      ...
---------------------------------------------------------------------------------------------------
NAMESPACE:
  use App\...;                      single
  use App\{..., ...};               multiple
---------------------------------------------------------------------------------------------------
CODE:
  <?php
    ...
  ?>                                no closing tag for pure php
---------------------------------------------------------------------------------------------------
COMMENTS:
  //                                single line
  /* ... */                         multiple lines
---------------------------------------------------------------------------------------------------
OUTPUT:
  echo "...";                       output a string
  echo '...';
  <?= "..."; ?>                     shorthand for <?php echo "..." ?>

  echo $var1 . "..." . $var2;       concatenation
  echo "... $var";                  output with variable

  var_dump(...);                    output any variable details
  print_r(...);                     alternative
---------------------------------------------------------------------------------------------------
ERRORS:
  php.ini                           display error messages in the browser, disable for final!
    error_reporting = E_ALL
    display_errors = On
---------------------------------------------------------------------------------------------------
LOGIC:
  &&                                and
  ||                                or
  !                                 not
  ==                                equal
  !=                                not equal
---------------------------------------------------------------------------------------------------
VARIABLES:
  $var = "...";                     create a variable
  $var                              access a variable

  specify type:
    int $var = 1;                   "1" gets translated
    bool $var = true;               1, "test" gets translated

    declare(strict_type=1);         disable translating

  $$var                             access a variable with the name stored inside the variable
  !$var                             check if variable exists or if it is empty
---------------------------------------------------------------------------------------------------
BOOLEANS:
  true
  false

  $var
  !$var
---------------------------------------------------------------------------------------------------
STRINGS:
  $myStr = "...";                     create a string
  $myStr = '...';                     alternative

  .=                                  add to a string
---------------------------------------------------------------------------------------------------
ARRAYS:
  declaration:
    $myArr = [];                      create empty array
    $myArr = ["...", "..."];          create array

  elements:
    $myArr[0];                        access an element
    $myArr[0] = "...";                create/change an element

    $myArr[] = "...";                 add to the end of the array
    unset($myArr["..."];              remove an element

  associative array:
    declaration:
      $myArr = ["..." => ...,         key, value pairs
                "..." => ...]

    elements:
      $myArr["..."]                   access value
      $myArr["..."] = "...";          create/change value
---------------------------------------------------------------------------------------------------
CLASS:
  class ... {                               capitalized
    public function __construct($...) {     constructor method, runs on instantiating, receives arg

    }

    protected ...
    public ...
    public static ...
  }

  instance:
    $... = new ...(...);                    create instance of class with arg
    $...->...;                              access class variable
    $...->...();                            access class method

    $this                                   refers to the instance itself
      public $var;                          example
      $this->var = ...;

  Connection::make();                       public static

  Example:
    class Task {
      protected $description;

      protected $completed = false;

      public function __construct($description) {
        $this -> description = $description;
      }
    }

    $task = new Task("Go to the store");
---------------------------------------------------------------------------------------------------
FUNCTIONS:
  function myFunc($arg1, $arg2 = ...) {     create a function, with arg and default value
    ... ;
    return $test;
  }

  myFunc();                                 call a function

  closure:                                  anonymous function
    myFunc(..., function() {...});          as callback

    $var = function() {...};                as assignment
---------------------------------------------------------------------------------------------------
EXCEPTIONS:
  try {
    ...;
  } catch (...) {                     (... | ...) multiple exceptions
    ...;
  }
---------------------------------------------------------------------------------------------------
STRING METHODS:
  strlen(...);                      length
  str_word_count(...);              number of words
  strrev(...);                      reverse
  strpos(..., ...);                 return position of text, otherwise FALSE
  str_replace(..., ..., ...);       replace text with text in string

  ucwords(...);                     uppercase

  sprintf("%s %s", "...", "...")    create string with attached placeholders
    %s string

  explode("...", ...);              split at seperator and return as array
---------------------------------------------------------------------------------------------------
ARRAY METHODS:
  array_filter($..., function ($...) {...});        return array of filtered elements
  array_map(function ($...) {...}, $...);           return array after running function on elements
  array_column(..., ...);                           return array with values for specified key

  sort array:
    sort($...);                                     ascending
    rsort($...);                                    descending
  
  sort associative array:
    ksort($...);                                    ascending by key
    asort($...);                                    ascending by value
    krsort($...);                                   descending by key
    arsort($...);                                   descending by value
    
  usort($..., function($a, $b) {return $a <=> $b;}  sort by greater, return -1, 0, 1

  sizeof($..., COUNT_RECURSIVE);    length of an array, optional recursive count
  count($...);                      see sizeof()  
  array_keys($...);                 return array of keys
  implode("...", ...);              return string of elements with seperator
  list($..., $...) = $...;          create variables that correspond to array elements
  [$..., $...] = $...;              alternative
  ["..." => $...] = $...;           for associative array
---------------------------------------------------------------------------------------------------
CONDITIONS:
  IF:
    if (...) {
      ...;
    } elseif {
      ...;
    } else {
      ...;
    }
  
  TERNARY:
    ... ? ... : ...                           if true do first, otherwise second

  SWITCH:
    switch (...) {                            value to check
      case ...:                               if match
        ...;                                  run code
        break;                                exit switch
      ...
      default:
        ...                                   default code
    }

  NULL COALESCE:
    $var ?? "test"                            if $var doesn't exist use "test"
---------------------------------------------------------------------------------------------------
LOOPS:
  FOR:
    for ($i = 0; $i < 10; $i++){              for loop
      ...;
    }
  
  FOREACH:
    foreach ($myArr as $ele) {                loop over array
      ...;
    }

    foreach ($myArr as $key => $value) {      loop over associative array
      ...;
    }

    in HTML:
      <?php foreach ($myArr as $key => $value) : ?>
        <li><?= $key $value; ?></li>
      <?php endforeach; ?>
  
  WHILE:                                       while loop
    $i = 0;
    while ($i < 10) {
      ...;
      $i++;
    }

  DO WHILE:                                    do while loop
    $i = 0;
    do {
      ...;
      $i++;
    } while ($i < 10);
---------------------------------------------------------------------------------------------------
GLOBAL VARIABLES:
  $_GET                             shows up in the URL as ?name=abc&password=123
  $_GET["..."]                      to access GET data

  $_POST                            does not show up in the URL

  $_SERVER

  $_REQUEST
---------------------------------------------------------------------------------------------------
DATE TIME:
  date("...", ...)                  format, optional timestamp, otherwise now
    d                               day, 01 - 31
    m                               month, 01 - 12
    Y                               year 0000
    l                               weekday
    / . -                           seperator

    h                               hour, 01 - 12
    i                               minute, 00 - 59
    s                               second, 00 - 59
    a                               am pm
    :                               seperator

  mktime(h,m,s, m,d,y)              convert values to unix timestamp
  strtotime("...")                  convert string to unix timestamp
---------------------------------------------------------------------------------------------------
EMAIL:
  $emailTo = "...";
  $subject = "...";
  $body = "...";
  $headers = "From ...";
---------------------------------------------------------------------------------------------------
REMOVE SPACES:
  $string = str_replace(' ', '', $string);        remove spaces
  $string = preg_replace('/\s+/', '', $string);   remove all whitespace
---------------------------------------------------------------------------------------------------
  die("...");                       halt execution and output ...
  htmlspecialchars(...);            sanitize

  trim(..., "...")                  trim whitespace, optional characters to trim
  parse_url(..., PHP_URL_PATH);     retrieve section of a URL

  dd                                "die and dump"