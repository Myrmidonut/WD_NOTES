VERSIONS:
  PHP 7
---------------------------------------------------------------------------------------------------
COMPOSER:
  composer.json:
    {
      "autoload": {
        "classmap": [               load every class from that path
          "controllers/"            specific folder
          "./"                      everything
        ]
      }
    }

  composer install                  load dependencies, create vendor/composer/

  index.php:
    require "vendor/autoload.php";  add require

  core/bootstrap.php:
    // require "core/Router.php";   comment require

  rebuild:
    composer dump-autoload
---------------------------------------------------------------------------------------------------
LOCAL WEBSERVER:
  php -S localhost:8000             run build-in webserver from php main folder
      -t foldername                 specific sub folder
      -c php.inside                 specific ini file
---------------------------------------------------------------------------------------------------
FILES:
  index.php                         main page
  php.ini                           for errors, don't use in final

  seperate concerns:
    index.view.php                  html

    index.php                       php
      ...
      require "index.view.php";
---------------------------------------------------------------------------------------------------
PHP STATUS:
  phpinfo();
---------------------------------------------------------------------------------------------------
INCLUDING FILES:
  require "file.php";               import local file, stop on error
  include "file.php";               import local file, warning on error

  file_get_contents("http://...");  import website

  bootstrap:
    bootstrap.php
      require "...";
      ...
---------------------------------------------------------------------------------------------------
NAMESPACE:
  use App\...;                      single
  use App\{..., ...};               multiple
---------------------------------------------------------------------------------------------------
CODE:
  <?php
    ...
  ?>                                no closing tag for pure php
  --------------------
  HTML:
    <?php foreach ($myArr as $key => $value) : ?>
      <li><?= $key $value; ?></li>
    <?php endforeach; ?>
---------------------------------------------------------------------------------------------------
COMMENTS:
  //                                single line
  /* ... */                         multiple lines
---------------------------------------------------------------------------------------------------
OUTPUT:
  echo "...";                       output a string
  echo '...';
  echo "... $var";                  output with variable
  echo $var1 . "..." . $var2;       concatenation

  <?= "..."; ?>                     shorthand for <?php echo "..."; ?>

  printf("... %s", $...);           print with variable at $s
    %.2f                            as float with decimal places

  var_dump(...);                    output any variable details
  print_r(...);                     alternative
---------------------------------------------------------------------------------------------------
ERRORS:
  php.ini                           display error messages in the browser, disable for final!
    error_reporting = E_ALL
    display_errors = On
---------------------------------------------------------------------------------------------------
ARITHMETIC:
  +             add
  -             subtrac
  *             multiply
  /             divide
  %             mod

  +=
  -=
  *=
  /=
  %=

  ++...         add first, then use
  ...++         use first, then add
---------------------------------------------------------------------------------------------------
LOGIC:
  &&            and
  ||            or
  !             not
---------------------------------------------------------------------------------------------------
COMPARISON:
  ==            equal
  ===           equal with same type
  !=            not equal
  !==           not equal with same type

  >             greater
  <             less
---------------------------------------------------------------------------------------------------
DATA TYPES:
  variables are automatically assigend a data type
  default: null

  integer                     whole numbers
  float                       decimal numbers
  string                      strings
  boolean                     true, false
  array                       multiple elements
  object                      defined by a class

  casting:
    (...) (...);              cast to different data type
    (integer) (12 / 5);       
---------------------------------------------------------------------------------------------------
VARIABLES:
  $var = "...";                     create a variable
  $var                              access a variable

  define("VAR", ...);               create a constant
  VAR                               access a constant

  $var1 = &$var2                    create reference, show changes on original

  specify type:
    int $var = 1;                   "1" gets translated
    bool $var = true;               1, "test" gets translated

    declare(strict_type=1);         disable translating

  $$var                             access a variable with the name stored inside the variable
  !$var                             check if variable exists or if it is empty
---------------------------------------------------------------------------------------------------
BOOLEANS:
  true
  false

  $var
  !$var
---------------------------------------------------------------------------------------------------
STRINGS:
  $myStr = "...";                     create a string
  $myStr = '...';                     alternative

  .=                                  add to a string
---------------------------------------------------------------------------------------------------
ARRAYS:
  declaration:
    $myArr = [];                      create empty array
    $myArr = ["...", "..."];          create array
    $myArr = array("...", "...");     old alternative

  elements:
    $myArr[0];                        access an element
    $myArr[0] = "...";                create/change an element

    $myArr[] = "...";                 add to the end of the array
    unset($myArr["..."];              remove an element

  associative array:
    declaration:
      $myArr = ["..." => ...,         key, value pairs
                "..." => ...]

    elements:
      $myArr["..."]                   access value
      $myArr["..."] = "...";          create/change value
---------------------------------------------------------------------------------------------------
CLASS:
  class:
    class ... {                             capitalized
      ...
    }

  subclass:
    class ... extends ... {                 same as class, but overwrites with own properties
      ...
    }

  abstract class:
    abstract class ... {                    cannot be instantiated
      abstract function ...() {
        ...
      }
    }
    
  interface:
    interface ... {                         create interface
      public function ...();                empty function
    }

    class ... extends ... implements ... {
      function ...() {                      set empty function
        ...
      }
    }
  --------------------
  variables:
    protected ...;                          can only be accessed inside the class and subclass
    public ...;                             can be changed from anywhere
    private ...;                            can only be accessed inside the class
    public static ...;                      changes for every subclass
    const ... = ...;                        never changes, capitalized

    ...::$... = ...;                        access public static
    ...::...;                               access const
  --------------------
  methods:
    function ...() {                        method
      ...
    }

    final function ...() {                  subclass cannot overwrite
      ...
    }

    static function ...() {                 can be used without creating an object
      ...
    }

    ...::...();                             access public static
  --------------------
  constructor:
    public function __construct() {         run on object create
      ...
    }

  destructor:
    public function __destruct() {          run on object destroy
      ...
    }
  }
  --------------------
  getter:
    function __get(...) {                   access class variable
      ...
    }

  setter:
    function __set(..., ...) {              change class variable to new value
      ...
    }
  --------------------
  to string:
    function __toString() {                 run on instance call
      return $this->...;
    }
  --------------------
  inheritance:
    only from one class
    from multiple interfaces

    object:                                 instance
      $... = new ...();                     create instance of class
      $...->...;                            access class variable
      $...->...();                          access class method

      $this                                 refers to the object itself
        public $var;                        example
        $this->var = ...;
  --------------------
  stuff:
    ... instanceof ...                      check is object belongs to class
    ... = clone ...;                        create clone of object
---------------------------------------------------------------------------------------------------
FUNCTIONS:
  function myFunc($arg1, $arg2 = ...) {     create a function, with arg and default value
    ... ;
    return $test;                           return
  }

  myFunc();                                 call a function

  closure:                                  anonymous function
    myFunc(..., function() {...});          as callback

    $var = function() {...};                as assignment
---------------------------------------------------------------------------------------------------
EXCEPTIONS:
  try {
    ...;
  } catch (...) {                     (... | ...) multiple exceptions
    ...;
  }
---------------------------------------------------------------------------------------------------
STRING METHODS:
  counting:
    strlen(...);                      length
    str_word_count(...);              number of words

  whitespace:
    trim(...);                        remove whitespace at beginning and end
    ltrim(...);                       remove whitespaces at beginning
    rtrim(...);                       remove whitespace at end

  reverse:
    strrev(...);                      reverse

  search:
    strpos(..., ...);                 return position of string, otherwise FALSE
    strstr(..., "...");               return string starting at character

  replace:
    str_replace(..., ..., ...);       replace text with text in string

  substring:
    substr("...", ..., ...);          substring from first index to last

  comparison:
    strcmp(..., ...);                 returns number for size difference
    strcasecmp(..., ...);             returns number for size difference, ignores case

  capitalize:
    strtoupper(...);                  uppercase
    strtolower(...);                  lowercase
    ucwords(...);                     first character capitalized
    ucfirst(...);                     first character of each word capitalized

  sprintf("%s %s", "...", "...")    create string with attached placeholders
    %s string

  to array:
    explode(" ", ...);                split at seperator and return as array
---------------------------------------------------------------------------------------------------
ARRAY METHODS:
  array_filter($..., function ($...) {...});        return array of filtered elements
  array_map(function ($...) {...}, $...);           return array after running function on elements
  array_column(..., ...);                           return array with values for specified key

  sort array:
    sort($...);                                     ascending
    rsort($...);                                    descending
  
  sort associative array:
    ksort($...);                                    ascending by key
    asort($...);                                    ascending by value
    rksort($...);                                   descending by key
    rasort($...);                                   descending by value
    
  usort($..., function($a, $b) {return $a <=> $b;}  sort by greater, return -1, 0, 1

  iterate:
    foreach($... as $...) {...}                     run on every element
  
  iterate associative array:
    foreach($... as $... => $...) {...}             run on every key-value-pair

  $... + $...                       

  sizeof($..., COUNT_RECURSIVE);    length of an array, optional recursive count
  count($...);                      see sizeof()  
  array_keys($...);                 return array of keys
  implode(" ", ...);                return string of elements with seperator
  list($..., $...) = $...;          create variables that correspond to array elements
  [$..., $...] = $...;              alternative
  ["..." => $...] = $...;           for associative array
---------------------------------------------------------------------------------------------------
CONDITIONS:
  IF:
    if (...) {
      ...;
    } elseif {
      ...;
    } else {
      ...;
    }
  --------------------
  TERNARY:
    ... ? ... : ...                           if true do first, otherwise second
  --------------------
  SWITCH:
    switch (...) {                            value to check
      case ...:                               if match
        ...;                                  run code
        break;                                exit switch
      ...
      default:
        ...                                   default code
    }
  --------------------
  NULL COALESCE:
    $var ?? "test"                            if $var doesn't exist use "test"
---------------------------------------------------------------------------------------------------
LOOPS:
  FOR:
    for ($i = 0; $i < 10; $i++){
      ...;
      break;                                  exit the loop
    }
  --------------------
  FOREACH:
    foreach ($myArr as $ele) {                loop over array
      ...;
    }

    foreach ($myArr as $key => $value) {      loop over associative array
      ...;
    }
  --------------------
  WHILE:
    $i = 0;
    while ($i < 10) {
      ...;
      $i++;
    }
  --------------------
  DO WHILE:
    $i = 0;
    do {
      ...;                                    run at least once
      $i++;
    } while ($i < 10);
---------------------------------------------------------------------------------------------------
GLOBAL VARIABLES:
  $_GET                             shows up in the URL as ?name=abc&password=123
  $_GET["..."]                      to access GET data
  $_POST                            does not show up in the URL
  $_SERVER
  $_REQUEST
---------------------------------------------------------------------------------------------------
DATE TIME:
  date("...", ...)                  format, optional timestamp, otherwise now
    d                               day, 01 - 31
    m                               month, 01 - 12
    Y                               year 0000
    l                               weekday
    / . -                           seperator

    h                               hour, 01 - 12
    i                               minute, 00 - 59
    s                               second, 00 - 59
    a                               am pm
    :                               seperator

  mktime(h,m,s, m,d,y)              convert values to unix timestamp
  strtotime("...")                  convert string to unix timestamp
---------------------------------------------------------------------------------------------------
EMAIL:
  $emailTo = "...";
  $subject = "...";
  $body = "...";
  $headers = "From ...";
---------------------------------------------------------------------------------------------------
STUFF:
  die("...");                       halt execution and output ...
  htmlspecialchars(...);            sanitize
  parse_url(..., PHP_URL_PATH);     retrieve section of a URL
  dd                                "die and dump"
  rand(..., ...);                   random number between values