uses JSX
needs to be compiled with Babel

needs exactly one parent element

uses camelCase
---------------------------------------------------------------------------------------------------
INSTALLATION:
  npm:
    npm install -g create-react-app       install automated react
    create-react-app ...                  create folder and creates basic react app

    npm start                             from inside react app folder

    npm run build                         create optimized version in build folder

  JS link:
    React                                 components
    ReactDOM                              rendering
    Babel                                 JSX
---------------------------------------------------------------------------------------------------
VARIABLES:
  const JSX = (                   () optional
    <div>
      <h1>...</h1>
    </div>
  );
---------------------------------------------------------------------------------------------------
COMMENTS:
  {/* ... */}
---------------------------------------------------------------------------------------------------
CLASSES:
  className="..."
---------------------------------------------------------------------------------------------------
TAGS:
  self closing:
    <br />                        no content

  non self closing:
    <div>...</div>                with content
    or:
    <div />                       no content
---------------------------------------------------------------------------------------------------
STYLES:
  stylesheet

  inline:
    <div style={{color: "green", fontSize: "16px"}}>...</div>

  inline with variable:
    const styles = {...: ..., ...: ...}
    <div style={styles}>...</div>

  uses camelCase
  px values only need number, otherwise use "4em", etc.
---------------------------------------------------------------------------------------------------
STATELESS COMPONENTS:
  capital letter
  returns JSX or null
  use stateless when possible

  stateless functional component:           only receive and render
    function Name(props) {                  example, arrow function is common
      ...;                                  JS
      return (
        <div className="name" />
      );  
    };

  stateless component:
    class Name extends React.Component {
      constructor(props) {                  standard to include constructor(props)
        super(props);                       calls constructor of parent (React.Component)
      }
      render() {                            render
        ...;                                JS
        return (                            return
          <div>                             one parent div
            <h1>Hi</h1>                     JSX
          </div>
        );
      }
    }

  multiple:
    create individual components Navbar and Dashboard

    return (
      <App>
        <Navbar />                          component
        <Dashboard />                       component
      </App>
    )
---------------------------------------------------------------------------------------------------
STATEFUL COMPONENTS:
  class Name extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        ...: ...,
        ...: ...
      }
    }
    render() {
      return <div>...</div>
    }
  }
---------------------------------------------------------------------------------------------------
REACT DOM RENDER:
  ReactDOM.render(component, target)                    JSX
  ReactDOM.render(<Component ...="..." />, target)      class Component with prop

  target == document.getElementById("test")             example target

  single page: one ReactDOM.render()
  mixed multi page: one ReactDOM.render() per section

  can use if/else inside render
  {this.state.display === true && <h1>Displayed!</h1>}  render only if true

  conditionals inside return
---------------------------------------------------------------------------------------------------
PROPS:
  from parent to child

  parent: <... name="..." ...>

  stateless functional:
    child: ...(props)
             ...{props.name}...

  class:
    child: ...(props)
             ...{this.props.name}...

  const ... = (props) =>                  pass properties to a function
    <h1>Hello, {props.user}!</h1>         access: {props. ...}

  default:
    MyComponent.defaultProps = {name: "Jim"}

    override with <... name={"Tom"} ...>

  type:
    MyComponent.propTypes = {name: PropTypes.func.isRequired}
      func
      bool
      number
      ...

    check if property name is of PropTypes func for MyComponent
    name is a required property for MyComponent (.isRequired)

    import React, { PropTypes } from "react";
---------------------------------------------------------------------------------------------------
STATE:
  update changes to the data
  changes to the state trigger render again
  requires class
  local to class
  access methods inside the class with this.name

  class Name extends React.Component {    example
      constructor(props) {
        super(props);
        this.state = {                    declaring state
          name: "..."
        }
        this.test = this.test.bind(this);
      }
      test() {
        this.setState({                   modifying state
          name: "..."
        });

        this.state.name = "...";          alternative???
      }
    }
---------------------------------------------------------------------------------------------------
LIFECYCLE:
  mount:
    first page load
  re-render:
    state changes

  componentWillMount()                  called before render when component is mounted to DOM

  componentDidMount()                   called after mounted to DOM
                                        calls to setState trigger a new render
                                        API or server calls
                                        event listeners, add and remove for best practice
                                      
  componentWillReceiveProps(nextProps)  called when component receices new props
                                        new prop as argument (nextProps) and compare with his.props

  shouldComponentUpdate(nextProps, nextState)    re-render component if it returns true    

  componentWillUpdate()

  componentDidUpdate()                  called after component re-renders

  componentWillUnmount()
---------------------------------------------------------------------------------------------------
SERVER:
  ReactDOMServer.renderToString(<App />);

  render page on server and send to client
---------------------------------------------------------------------------------------------------
EXAMPLE:
  single page application:
    <div id="app"></div>

    function Person(props) {
      return (
        <div className="person">
          <h1>{props.name}</h1>
          <p>Your age: {props.age}</p>
        </div>
      );
    }

    var app = (
      <div>
        <Person name="Max" age="28" />
        <Person name="Manu" age="29" />
      </div>
    );

    ReactDOM.render(app, document.querySelector("#app"));
---------------------------------------------------------------------------------------------------
EXAMPLE:
  class CampSite extends React.Component {
    constructor(props) {
      super(props);
    }

    render() {
      return (
        <div>
          <Camper/>
        </div>
      );
    }
  };

  function Camper(props) {
    return (
      <p>{props.name}</p>
    )
  }

  Camper.defaultProps = {
    name: "CamperBot"
  }

  Camper.propTypes = {
    name: PropTypes.string.isRequired
  }
---------------------------------------------------------------------------------------------------
EXAMPLE:
  class Counter extends React.Component {
    constructor(props) {
      super(props);

      this.state = {
        count: 0
      };

      this.increment = this.increment.bind(this);
      this.decrement = this.decrement.bind(this);
      this.reset = this.reset.bind(this);
    }

    increment() {
      this.setState({
        count: this.state.count + 1
      });
    };
    
    decrement() {
      this.setState({
        count: this.state.count - 1
      });
    };

    reset() {
      this.setState({
        count: 0
      });
    };

    render() {
      return (
        <div>
          <button className='inc' onClick={this.increment}>Increment!</button>
          <button className='dec' onClick={this.decrement}>Decrement!</button>
          <button className='reset' onClick={this.reset}>Reset</button>
          <h1>Current Count: {this.state.count}</h1>
        </div>
      );
    }
  };
---------------------------------------------------------------------------------------------------
EXAMPLE:
  class ControlledInput extends React.Component {
    constructor(props) {
      super(props);

      this.state = {
        input: ''
      };

      this.handleChange = this.handleChange.bind(this);
    }

    handleChange(event) {
      this.setState({
        input: event.target.value
      })
    }

    render() {
      return (
        <div>
          <input value={this.state.input} onChange={this.handleChange} />
          <h4>Controlled Input:</h4>
          <p>{this.state.input}</p>
        </div>
      );
    }
  };
---------------------------------------------------------------------------------------------------
EXAMPLE:
  class MyForm extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        input: '',
        submit: ''
      };
      this.handleChange = this.handleChange.bind(this);
      this.handleSubmit = this.handleSubmit.bind(this);
    }

    handleChange(event) {
      this.setState({
        input: event.target.value
      });
    }

    handleSubmit(event) {
      this.setState({
        submit: this.state.input
      });
    }

    render() {
      return (
        <div>
          <form onSubmit={this.handleSubmit}>
            <input value={this.state.input} onChange={this.handleChange} />
            <button type='submit'>Submit!</button>
          </form>
          <h1>{this.state.submit}</h1>
        </div>
      );
    }
  };
---------------------------------------------------------------------------------------------------
EXAMPLE:
  class MyApp extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        name: 'CamperBot'
      }
    }
    render() {
      return (
         <div>
           <Navbar name={this.state.name} />
         </div>
      );
    }
  };

  class Navbar extends React.Component {
    constructor(props) {
      super(props);
    }
    render() {
      return (
      <div>
        <h1>Hello, my name is: {this.props.name}</h1>
      </div>
      );
    }
  };
---------------------------------------------------------------------------------------------------
EXAMPLE:
  const inputStyle = {
    width: 235,
    margin: 5
  }

  class MagicEightBall extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        userInput: '',
        randomIndex: ''
      }
      this.ask = this.ask.bind(this);
      this.handleChange = this.handleChange.bind(this);
    }
    ask() {
      if (this.state.userInput) {
        this.setState({
          randomIndex: Math.floor(Math.random() * 20),
          userInput: ''
        });
      }
    }
    handleChange(event) {
      this.setState({
        userInput: event.target.value
      });
    }
    render() {
      const possibleAnswers = [
        'It is certain',
        'It is decidedly so',
        'Without a doubt', 
        'Yes, definitely',
        'You may rely on it',
        'As I see it, yes',
        'Outlook good',
        'Yes',
        'Signs point to yes',
        'Reply hazy try again',
        'Ask again later',
        'Better not tell you now',
        'Cannot predict now',
        'Concentrate and ask again',
        'Don\'t count on it', 
        'My reply is no',
        'My sources say no',
        'Most likely',
        'Outlook not so good',
        'Very doubtful'
      ];
      const answer = possibleAnswers[this.state.randomIndex]; // << change code here
      return (
        <div>
          <input
            type="text"
            value={this.state.userInput}
            onChange={this.handleChange}
            style={inputStyle} /><br />
          <button onClick={this.ask}>
            Ask the Magic Eight Ball!
          </button><br />
          <h3>Answer:</h3>
          <p>
            { /* change code below this line */ }
            {answer}
            { /* change code above this line */ }
          </p>
        </div>
      );
    }
  };
---------------------------------------------------------------------------------------------------
EXAMPLE:
  class Results extends React.Component {
    constructor(props) {
      super(props);
    }
    render() {
      return (
        <h1>
          {this.props.fiftyFifty ? "You win!" : "You lose!"}
        </h1>
      )
    };
  };

  class GameOfChance extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        counter: 1
      }
      this.handleClick = this.handleClick.bind(this);
    }
    handleClick() {
      this.setState({
        counter: this.state.counter + 1
      });
    }
    render() {
      let expression = Math.random()> 0.5;
      return (
        <div>
          <button onClick={this.handleClick}>Play Again</button>
          <Results fiftyFifty = {this.expression}/>
          <p>{'Turn: ' + this.state.counter}</p>
        </div>
      );
    }
  };
---------------------------------------------------------------------------------------------------
EXAMPLE:
  const textAreaStyles = {
    width: 235,
    margin: 5
  };

  class MyToDoList extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        userInput: "",
        toDoList: []
      }
      this.handleSubmit = this.handleSubmit.bind(this);
      this.handleChange = this.handleChange.bind(this);
    }

    handleSubmit() {
      const itemsArray = this.state.userInput.split(',');
      this.setState({
        toDoList: itemsArray
      });
    }

    handleChange(e) {
      this.setState({
        userInput: e.target.value
      });
    }

    render() {
      const items = this.state.toDoList.map(function(e) {
        return <li>{e}</li>;
      });

      return (
        <div>

          <textarea
            onChange={this.handleChange}
            value={this.state.userInput}
            style={textAreaStyles}
            placeholder="Separate Items With Commas" /><br />

          <button onClick={this.handleSubmit}>Create List</button>

          <h1>My "To Do" List:</h1>

          <ul>
            {items}
          </ul>

        </div>
      );
    }
  };
---------------------------------------------------------------------------------------------------
EXAMPLE:
  class DisplayMessages extends React.Component {
    constructor(props) {
      super(props);

      this.state = {
        input: '',
        messages: []
      }

      this.handleChange = this.handleChange.bind(this);
      this.submitMessage = this.submitMessage.bind(this);
    }

    handleChange(event) {
      this.setState({
        input: event.target.value
      })
    }

    submitMessage() {
      let newMessages = [...this.state.messages, this.state.input];
      this.setState({
        input: "",
        messages: newMessages
      })
    }

    render() {
      return (
        <div>
          <h2>Type in a new Message:</h2>
          <input value={this.state.input} onChange={this.handleChange} />
          <button type="submit" onClick={this.submitMessage}>Submit</button>
          <ul>
            {
              this.state.messages.map(function(e) {
                return <li>{e}</li>
              })
            }
          </ul>
        </div>
      );
    }
  };
---------------------------------------------------------------------------------------------------