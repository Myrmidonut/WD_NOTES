OVERVIEW:
  uses JSX
  uses camelCase
  filenames are capitalized

  single page:
    one HTML page
    content rerendered on client
    usually one ReactDOM.render() call

  multi page:
    multiple HTML pages
    content rendered on server
    one ReactDOM.render() per widget
---------------------------------------------------------------------------------------------------
INSTALLATION:
  create-react-app:
    npm install -g create-react-app       install automated react app generator
    create-react-app ...                  create folder with basic react app
    
    npm start                             start server running the app
    npm run build                         create optimized version in build folder

  JS link:
    React                                 components
    ReactDOM                              rendering
    Babel                                 JSX

  Chrome:
    React Developer Tools                 can display details for react components
---------------------------------------------------------------------------------------------------
EXPRESS:
  create-react-app
  npm install
  npm install express --save

  server.js:
    const path    = require("path");
    const port    = 4000;

    app.use(express.static(path.join(__dirname, 'build')));

    app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, "build", "index.html"));
    });

  package.json:
    "proxy": "http://localhost:4000"

  npm run build
  node server.js
  npm start
---------------------------------------------------------------------------------------------------
GITHUB PAGES:
  create repository on GitHub without readme
  create local repository, link to GitHub

  npm install --save gh-pages

  package.json:
    "homepage": "https://username.github.io/repository/",

    "scripts": {
      "predeploy": "npm run build",
      "deploy": "gh-pages -d build"
    }

  npm run deploy
---------------------------------------------------------------------------------------------------
WORKFLOW:
  create-react-app ...
  npm run eject
    adjust files
  npm start
  delete demo files
  create folders, files
---------------------------------------------------------------------------------------------------
FOLDERS:
  node_modules/                            npm dependencies
  public/                                  static files
    index.html                             html page
    favicon.ico                            favicon
  src/                                     dynamic files
    assets/                                images, etc.
    components/                            stateless components
      Component1/
        Component1.js
        Component1.css
    containers/                            stateful components
      App.js
      App.css
      App.test.js
    hoc/                                   higher order components
      Aux.js
    index.js                               renders App.js
    index.css                              general css rules
---------------------------------------------------------------------------------------------------
FILES:
  App.js:
    import React, { Component } from 'react';
    import './App.css';                                         import stylesheet
    import Component1 from "./Component1/Component1";           import component

    class App extends Component {
      render() {
        return (
          <div className="App">
            ...
            <Component1 />
          </div>
        );
      }
    }

    export default App;
  --------------------
  index.js:
    import React from 'react';
    import ReactDOM from 'react-dom';
    import './index.css';
    import App from './App';
    import registerServiceWorker from './registerServiceWorker';

    ReactDOM.render(<App />, document.getElementById('root'));
    registerServiceWorker();
---------------------------------------------------------------------------------------------------
JSX:
  {...}                           run code in HTML

  {/* ... */}                     comment

  uses camelCase
---------------------------------------------------------------------------------------------------
TAGS:
  self closing:
    <br />                        no content

  non self closing:
    <div>...</div>                with content
    <div />                       no content
---------------------------------------------------------------------------------------------------
STYLES:
  all styling is global
  css modules add local styling

  <div className="..." />                   set class
  --------------------
  App.css:                                  global stylesheet
    import "./Style.css"

  Component1.css:                           global stylesheet
    import "./Component1.css"
  --------------------
  inline:
    <div style={{color: "green", fontSize: "16px"}}>...</div>

    with variable:
      inside render:
        const styles = {...}
        <div style={styles}>...</div>
  --------------------
  CSS modules:                                      create-react-app
    import styles from "./Component1.module.css"    local stylesheet

    <div className={styles.error} />                use local style
  --------------------
  Sass:
    npm install node-sass                           create-react-app
---------------------------------------------------------------------------------------------------
COMPONENTS:
  returns JSX or null
  returns one root element per component
  use stateless when possible
  --------------------
  function:                                 stateless
    import React from "react"

    const Name = (props) => {               static render
      ...                                   JS
      return (
        <div>
          ...
        </div>
      )
    }

    export default Name
  --------------------
  class:                                    stateful, access to state and lifecycle
    import React, { Component } from "react"

    class Name extends Component {          dynamic render
      state = {...}                         set state
      ...                                   JS
      render() {
        return (
          <div>
            ...
          </div>
        )
      }
    }

    export default Name
---------------------------------------------------------------------------------------------------
PROPS:
  pass data or functions around

  parent:
    <div name="..." />

  child:
    {props.name}                          stateless functional
    {this.props.name}                     class
    {props.children}                      anything inside the tags of the component call

  how to pass props:
    class App ... :
      state = {}                                          set state
      func1() {}                                          set function
      func2() {}                                          set function

      render() {                                          pass props
        return (
          <Comp1
            name1={this.state.ele}                        state
            name2={this.func1}                            function
          />
        )
      }

    class Comp1 ... :
      render() {                                          access props
        return (
          <div>{this.props.name1}</div>                   state
          <button onClick={this.props.name2}></button>    function
          <button onClick={() => this.props.name2(e)}     function with argument
        )
      }
  --------------------
  default:
    MyComponent.defaultProps = {name: "Jim"}

    override with <... name={"Tom"} ...>
  --------------------
  type:
    MyComponent.propTypes = {name: PropTypes.func.isRequired}
      func
      bool
      number
      ...

    check if property name is of PropTypes func for MyComponent
    name is a required property for MyComponent (.isRequired)

    import React, { PropTypes } from "react";
---------------------------------------------------------------------------------------------------
STATE:
  update changes to the data
  changes to the state trigger re-render
  declared only inside class
  local to class
  access methods inside the class with this.name
  use stateless functional components whenever possible
  create copy of state, change it, update old state
  --------------------
  class Name extends Component {
    state = {                                 declare state
      name: "..."
    }

    test() {
      this.setState({                         modify state
        name: "..."
      }, e => {...});                         optional callback
    }

    this.state.name                           read state
  }
  --------------------
  import React, { useState } from "react"

  const Name = () => {
    const [name, setName] = useState("...")   declare state

    test() {
      setName("...")                          modify state
    }

    name                                      read state
  }
  --------------------
  reset:
    initialState = this.state;

    clear() {
      this.setState(this.initialState)
    }
  --------------------
  old:
    constructor(props) {
      super(props);

      this.state = {
        test: 1
      }

      this.handleChange = this.handleChange.bind(this)
    }
---------------------------------------------------------------------------------------------------
HOOKS:
  state access in functional components
  lifecycle methods in functional components
  use at top level, not inside loops, etc.
  --------------------
  state:
    initialize state:
      const [count, setCount] = useState(0)

    access state:
      count
    
    modify state:
      setCount(...)
  --------------------
  effect:
    useEffect(() => {...})                      runs on component changes
  --------------------
  Example:
    import React, { useState, useEffect } from 'react';
    ...
    const [count, setCount] = useState(0)

    <p>You clicked {count} times</p>
    <button onClick={() => setCount(count + 1)}>Click</button>

    count                                       current state
    setCount                                    function, called in event handler or otherwise
    useState(...)                               sets initial state
---------------------------------------------------------------------------------------------------
EVENTS:
  onClick={this.props.handleClick}
  onChange={this.props.handleChange}
---------------------------------------------------------------------------------------------------
RENDER CONDITIONALLY:
  set condition inside render but before return
  render variables inside return
  --------------------
  example:
    render() {
      let persons = null;               reset

      if (...) {                        condition
        persons = (
          <div>
            ...
          </div>
        )
      }

      return (
        <div>
          {persons}                     render
        </div>
      );
    }
---------------------------------------------------------------------------------------------------
LISTS:
  needs a key for efficient DOM updates
  use map for lists with element and index
  --------------------
  const NumberList = (props) => {
    const numbers = props.numbers
    const listItems = numbers.map((number) =>
      <li key={number.toString()}>
        {number}
      </li>
    )
    return (
      <ul>{listItems}</ul>
    )
  }
  --------------------
  const NumberList = (props) => {
    const numbers = props.numbers;
    return (
      <ul>
        {numbers.map((number) =>
          <ListItem key={number.toString()}
                    value={number} />
        )}
      </ul>
    )
  }
  --------------------
  persons = (
    <div>
      {persons.map((person, index) => {
        return <Person 
          name={person.name}
          key={person.id} />
      })}
    </div>
  )
---------------------------------------------------------------------------------------------------
HTML:
  dangerouslySetInnerHTML={{__html: marked(props.text)}}      insert HTML

  e.target.value                                              get content of element
---------------------------------------------------------------------------------------------------
TWO WAY INTERACTION:
  const Editor = (props) => {
    return (
      <div>
        <textarea 
          value={props.text}                        state
          onChange={props.onChange} />              onChange
      </div>
    )
  }

  class App extends Component {
    state = {                                       state
      text: demoText
    }

    changeHandler = (e) => {                        change handler
      this.setState({
        text: e.target.value                        set state from target value
      })
    }

    render() {
      return (
        <div className="App">
          <Editor 
            text={this.state.text}                  state
            onChange={this.changeHandler} />        onChange
          <Preview 
            text={this.state.text} />
        </div>
      );
    }
  }
---------------------------------------------------------------------------------------------------
LIFECYCLE:
  mount                                           first page load 
  re-render                                       state change

  Create:
    constructor(props)                            call super(props), set up state
    componentWillMount()                          update state, optimize
    render()                                      prepare and structure JSX for DOM
    render child components
    componentDidMount()                           API or server calls, dont update state
    componentWillUnmount()                        before removing component

  Update external:
    componentWillReceiveProps(nextProps)          component receives new props
    shouldComponentUpdate(nextProps, nextState)   re-render component if it returns true    
    componentWillUpdate()
    render()
    render child components
    componentDidUpdate()                          called after component re-renders

  Update internal:
    shouldComponentUpdate(nextProps, nextState)
    componentWillUpdate()
    render()
    render child components
    componentDidUpdate()

  componentDidCatch()
---------------------------------------------------------------------------------------------------
DEBUGGING:
  chrome dev tools, sources:
    go to App.js file
    select linenumber to create a breakpoint
    check values, go to next step in code

  React Developer Tools extension:
    chrome dev tools, react
    inspect state, props

  error boundary (React 16):
    src/ErrorBoundary/ErrorBoundary.js:
      import React, { Component } from "react";

      class ErrorBoundary extends Component {
        state = {
          hasError: false,
          errorMessage: ""
        }

        componentDidCatch = (error, info) => {
          this.setState({hasError: true, errorMessage: error})
        }

        render() {
          if (this.state.hasError) {
            return <h1>{this.state.errorMessage}</h1>
          } else {
            return this.props.children;
          }
        }
      }

      export default ErrorBoundary;

    wrap returned component inside <ErrorBoundary>...</ErrorBoundary>
    move key prop to ErrorBoundary
---------------------------------------------------------------------------------------------------
BEHIND THE SCENES CODE:
  return (
    <div className="App">
      <h1>Hi, I am a React App</h1>
    </div>
  );

  equivalent to behind the scenes:
    return React.createElement("div", {className: "App"},
             React.createElement("h1", null, "Headline"));
---------------------------------------------------------------------------------------------------
REACT DOM RENDER:
  ReactDOM.render(component, target)                    JSX
  ReactDOM.render(<Component ...="..." />, target)      class Component with prop

  target == document.getElementById("test")             example target

  single page: one ReactDOM.render()
  mixed multi page: one ReactDOM.render() per section

  can use if/else inside render
  {this.state.display === true && <h1>Displayed!</h1>}  render only if true

  conditionals inside return
---------------------------------------------------------------------------------------------------
TYPE VALIDATION:
  check if the data passed in through props has the expected type

  npm install --save prop-prop-types        install

  import PropTypes from "prop-types";       import

  class Name extends Component {...}        create class

  Name.propTypes = {                        check prop types
    type: PropTypes.string.isRequired
  }
---------------------------------------------------------------------------------------------------
INTERVAL:
  this.interval = setInterval(() => {               setInterval
    ...
  }, 1000);
  
  clearInterval(this.interval);                     clearInterval
---------------------------------------------------------------------------------------------------
HIGHER ORDER COMPONENT:
  return:
    one parent element:
      <div>...</div>

    multiple adjacent elements:
      array with keys

      wrap in higher order component:
        Component.js:
          import Aux from "../../hoc/Aux";
          <Aux>...</Aux>

        hoc/Aux.js:
          const aux = (props) => props.children;
          export default aux;
---------------------------------------------------------------------------------------------------