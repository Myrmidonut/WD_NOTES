FILES:
  external:
    <html>
      <body>
        ...
        <script src="name.js"></script>
      </body>
    </html>

  internal:
    <html>
      <body>
        <script>
          ...
        </script>
      </body>
    </html>

  type="text/javascript"                for old HTML4

  multiple <script></sript> possible

  also possible inside <head> but it will be loaded before the HTML, better at the end of <body>
---------------------------------------------------------------------------------------------------
VERSIONS:
  ECMAScript 5 = JavaScript 1.8.5
  ECMAScript 6 = ECMAScript 2015 (const, let)
  ECMAScript 7 = ECMAScript 2016
---------------------------------------------------------------------------------------------------
STRICT MODE
  enables modern features
  classes and modules automatically enable strict
  no turning back

  "use strict";                         at the top of the page to enable it
---------------------------------------------------------------------------------------------------
EVENT BUBBLING:
  events inside multiple layers can trigger multiple times on different tags
  $("span").click(function(event){
    ...
    event.stopPropagation();
  });
---------------------------------------------------------------------------------------------------
COMMENTS:
  // ...                                one line comment
  /* ... */                             multi-line comment
---------------------------------------------------------------------------------------------------
CONSOLE:
  console.log(...);                     outputs into the console
  \"                                    printed as "
  alert("...");                         shows a window with text, etc.
  clear();                              clears the console in chrome
  console.log("...");                   outputs to the console
  prompt("...");                        shows a window with a message and input
    var user = prompt("User");
---------------------------------------------------------------------------------------------------
OPERATORS:
  unary - binary
  operand (number)

  Arithmetic:
    +
    -
    *
    /
    ++                                  prefix: ++i (first increment, then return), postfix: i++
    --
    %
    **                                  exponent

  Assignment:
    =
    +=                                  x = x + y
    -=
    *=
    /=
    %=
---------------------------------------------------------------------------------------------------
COMPARISON:
  returns true or false
  
  only null == only undefined

  >                                     greater than
  <                                     less than
  >=                                    greater or equal
  <=                                    less or equal
  ===                                   strict/identity equal, with type
  ==                                    equal
  !==                                   strict/identity not equal, with type
  !=                                    not equal

  comparing strings:
    letter by letter
    a > A
    Z > A
    breaks on greater letter, or longer string
---------------------------------------------------------------------------------------------------
LOGIC:
  &&                                    and, true if both true
  ||                                    or, true if at least one is true
  !                                     not

  x = a || b || c;                      return first true or last value
  x = a && b && c;                      return first false or last value
---------------------------------------------------------------------------------------------------
PRECEDENCE:
  ()
    ++
    --
      !
        *
        /
        %
          +
          -
            &&
              ||
---------------------------------------------------------------------------------------------------
VARIABLES:
  let name;                             new style

  var name;                             undefined
  var name = "test";                    string
  var name = 1;                         number
  var name = true;                      boolean
  var name1 = "test",
      name2 = 1;
  var name = null;                      undefined

  const name                            constant
  const NAME = ...                      constant, value is known, best practice

  hoisting:
    declaration is at the start of the block
    assignment is at the position in the code
---------------------------------------------------------------------------------------------------
SCOPE:
  var ...                               exists in the function or global
  let ...                               exists in the block, { }
  const ...                             exists in the block, { }
---------------------------------------------------------------------------------------------------
NAMING CONVENTION:
  lowerUpperUpper
  can contain
    $
    _
    letters
    numbers
  cannot start with a number
---------------------------------------------------------------------------------------------------
DATA TYPES:
  number                                integer or float, 4  9.3  -10
    Infinity                            infinity, 1 / 0
    NaN                                 computational error, "test" / 2
  string                                "Hello World"  "43"
  boolean                               true  false
  object                                collection of data
    symbol                              unique identifiers for objects
    array                               an ordered object
  null                                  represents empty, can be assigned to a variable
  undefined                             value of a variable without assignment

  typeof ...                            returns a string with the datatype, error: typeof(null) returns object
  typeof(...)                           see above

  if (typeof name == "undefined") {}    checks if the variable called name exists
---------------------------------------------------------------------------------------------------
TYPE CONVERSION:
  String(...)
  .toString()

  Number(...)
    undefined  -> NaN
    null       -> 0
    true/false -> 1/0
    string     -> whitespace removed, becomes a number, empty becomes 0, error becomes NaN

    mathematical operations create numbers, exception: + with a string creates a string
    +... == Number(...)

  Boolean(...)
    0         -> all false
    ""
    null
    undefined
    NaN
---------------------------------------------------------------------------------------------------
NUMBERS:
  let x = 1;                            integer
  let x = 1.1;                          floating point
  let x = 1e3;                          exponent, == 1000

  7 / 0 == Infinity
  null + 1 == 1
  undefined + 1 == NaN
---------------------------------------------------------------------------------------------------
STRINGS:
  myString = "...";                     string literal
  myString = '...';
  myString = `...`;                     allows embedding of variables and expressions into a string
    `... ${...} ...`
    
  "ab" + "cd" == "abcd"                 concatenation
  myString += "ab";                     ads a string to the end

  \                                     escape character to use special characters in a string
    \'                                  '
    \"                                  "
    \\                                  \
    \n                                  newline
    \r                                  carriage return
    \t                                  tab
    \b                                  backspace
    \f                                  form feed

  myString[2]                           access to the third character, UNSAFE! convert to array first
  "..."[2]

  1 + "2" == 12                         number + string == string
  1 - "2" == -1                         number - string == number
  " -9\n" + 5 == " -9\n5"
  " -9\n" - 5 == -14

  strings are immutable, it is not possible to change individual letters
---------------------------------------------------------------------------------------------------
BOOLEAN:
  false:
    false
    0
    ""
    null 
    undefined
    NaN

  true:
    everthing else, check with !!var

  true + false == 1
  let isGreater = 4 > 1;                isGreater == true
---------------------------------------------------------------------------------------------------
ARRAYS:                                 ordered list of data
  var myArray = [];                     create an empty array
  var myArray = [1, "two", [3, 4]];     create an array
  var myArray = new Array();            create an empty array, slower

  myArray[0] = ...;                     modify element at index 0

  myArray[3][4]                         nested array
  myArray[[1, 2], [3, 4]]               nested array

  adding elements at high indexes create undefined holes

  typeof(...)                                               arrays appear as objects
  Array.isArray(...)                                        check for an array
  function isArray(x) {                                     check for an array in older browsers
    return x.constructor.toString().indexOf("Array") > -1;
  }
  ... instanceof Array                                      returns true for arrays
---------------------------------------------------------------------------------------------------
OBJECTS:
  var myObj = {};                             create an empty object        
  var myObj = {prop: "value", ...};           create an object
  var myObj = {prop: [...], ...};
  var myObj = {prop: {prop: ..., ...}, ...};  subnamespace
  var myOby = [{...}, {...}];                 array of objects


  myObj.prop;                           calling a property
  myObj.prop[0];                        calling an array property
  myObj.meth();                         calling a method
  myObj.prop.prop;                      calling subnamespace

  myObj.prop = ...;                     modify
  myObj["prop"] = ...                   alternative

  myObj[prop] = value;                    
 
  data items: properties
  functions: methods

  .this                                 refers to the current object
---------------------------------------------------------------------------------------------------
STRING METHODS:
  myString
    .length                             length of string
    .indexOf("...")                     return first position of ... in a string, -1 if not
      .indexOf("...",15)                includes starting position
    .lastIndexOf("...")                 return last position of ... in a string, -1 if not
      .lastIndexOf("...",15)            includes starting position
    .search("...")                      similar to indexOf, no second argument, with regular expressions
    .charAt(5)                          return the character at index 5
    .charCodeAt(5)                      return the unicode character at index 5
    .slice(4)                           return string starting at index 4
      .slice(4, 8)                      return string starting at index 4 until 8-1
      .slice(-4)                        count from the end of a string
      .slice(-4, -8)                    count from the end of a string
    .substring(4)                       same as .slice but no negative indixes
    .substr(4)                          return string starting at index 4
      .substr(4, 3)                     return string starting at index 4 with length 3
      .substr(-4, 3)                    count from the end of a string
    .replace("text1", "text2")          replace the text1 with text2
      .replace(/text1/g , "text2")      replace all text1 with text2
      .replace(/text1/i , "text2")      replace all text1 with text2, case insensetive
    .toUpperCase()                      convert to uppercase
    .toLowerCase()                      convert to lowercase
    .concat("...", text2)               add string
    .split("...")                       split at the character and convert into an array
---------------------------------------------------------------------------------------------------
ARRAY METHODS:    
  myArray
    .length                             number of entries
    .sort()                             sort an array from lowest to highest value
    .toString()                         convert to a string with comma seperation
    .join("...")                        convert to a string with given seperation
    .push(...)                          add an entry to the end, returns new length
      .push(..., ...)                   multiple entries
      x = myArray.push("...");          x == new length
    .pop()                              remove the last entry, returns removed entry
      x = myArray.pop();                x == removed entry
    .unshift(...)                       add an entry to the beginning
      x = myArray.unshift("...");       x == new length
    .shift()                            remove the first entry
      x = myArray.shift();              x == removed entry
    .splice(4, 2)                       remove 2 entries from index 4 on
    .splice(2, 0, "...", "...")         remove 0 entries from index 2 on and add two entries
    .concat(...)                        merge two arrays
    .concat("...", "...")               merge values
    .indexOf(...)                       return the first index of that entry, -1 if not exists
    .slice(1)                           slice an array at index 1
    .slice(2, 3)                        slice an array at index 1 up to 3-1

  delete myArray[5]                     changes element at index 5 to undefined

  outputting an array converts it to a comma seperated string
    
  myArray.forEach(function(name) {      loop over the entries in an array
    ...                                 and run the function for the entries
  } );                                  passed in via the variable "name"
---------------------------------------------------------------------------------------------------
IF ELSE:
  if (condition) {                            if statement
    ...
  } else if (condition) {
    ...
  } else {
    ...
  }

  if(0) {...}                                 check for boolen type conversion
---------------------------------------------------------------------------------------------------
SWITCH:
  switch (expression) {                       switch statement
    case choice1:
      ...
      break;                                  leave switch if it is a match

    case choice2:
      ...
      break;

    default:                                  optional
      ...
  }
---------------------------------------------------------------------------------------------------
TERNARY:
  (condition) ? statement1 : statement2;      ternary

  if true run statement1, else run statement2
  can be nested in statements
---------------------------------------------------------------------------------------------------
FOR:
  for (init; end; increment) {                for loop
    ...
  }

    if (...) break;                           exit the loop early
    if (...) continue;                        jump to next iteration
---------------------------------------------------------------------------------------------------
WHILE:
  init;
  while (condition) {                         while loop
    ...
    increment;
  }
---------------------------------------------------------------------------------------------------
DO WHILE:
  init;
  do {                                        do while loop, always run at least once
    ...
    increment;
  } while (condition)
---------------------------------------------------------------------------------------------------
BREAK CONTINUE LABEL:
  if (condition) {                            break, leave whole loop
    break;
  }

  if (condition) {                            continue, leave current iteration
    continue;
  }

  label1: for () {                            label, leave both loops
    for () {
      if () {
        break label1;
      }
    }
  }
---------------------------------------------------------------------------------------------------
FUNCTIONS:
  function name(arg1, arg2) {                 creating the function
    ...;
    return ...;                               optional, will stop the function
  }

  name;                                       passing the function on
  name();                                     calling the function immediately

  function() {                                anonymous function, used with an event
    ...;
  }

    mybutton.onclick = function() {...}       anonymous function

  Array.prototype.name = function(func) {     prototype, this to call on the array
    func(this[i]);
  }

  variables inside a function are only availabe in the function, scope!
---------------------------------------------------------------------------------------------------
METHODS:
  a function inside an object

  obj.func = function() {               creating the method
    ...
  }
  obj.func();                           calling the method
---------------------------------------------------------------------------------------------------
THIS:
  this;                                 refers to the object in which the method is defined
---------------------------------------------------------------------------------------------------
USEFUL FUNCTIONS:
  Number(...);                          convert to a number

  isNaN(...);                           check if not a number

  Math.round();                         round to nearest whole number
  Math.floor(...);                      remove the decimals
  Math.random();                        random number between 0 and 1, e.g. 0.123, but not 1
    Math.random() * 5;                  random number between 0 and 5, e.g. 2.123, but not 5!
    Math.random() * 5 + 1;              random number between 1 and 5, including 1 and 5
  Math.floor(Math.random() * 6);        random number out of 1, 2, ..., 5

  setTimeout(function, ms);             execution after time in ms
  setInterval(function, ms);            repeated execution after time in ms

  Date().getTime();                     get the current time
    var start = new Date().getTime();