SHELL:
  python                          open console
  python3                         linux
  quit()                          quit console
---------------------------------------------------------------------------------------------------
FILES:
  .py                             file ending
---------------------------------------------------------------------------------------------------
PIP:
  python package manager

  sudo apt install python3-pip    install on linux

  pip                             python
  pip3                            python3
---------------------------------------------------------------------------------------------------
VIRTUALENV
  sudo apt install python3-venv   install on linux

  python3 -m venv myApp           create environment
  cd myApp
  source bin/activate             activate environment
---------------------------------------------------------------------------------------------------
IMPORT:
  modules:
    import ...                    importing a module
      time
      webbrowser
      os                          renaming files, etc.
      turtle                      creating lines, shapes, etc.
      urllib                      connection to website
      math                        mathematics
  --------------------
  files:
    import filename               importing a file, for example for a class
  --------------------
  selected:
    from ... import ..., ...      only import the specified methods, variables
    from ... import *             import everything
  --------------------
  call:
    moduleName.methodName()       when using import
    methodName()                  when using from ... import
  --------------------
  content:
    classes
    functions
    variables
    constants
    ...
  --------------------
  later methods overwrite earlier ones with same call name
---------------------------------------------------------------------------------------------------
COMMENTS:
  #                               single line
  
  '''                             multiple lines
  ...
  '''
---------------------------------------------------------------------------------------------------
CODE BLOCKS:
  using indentation
  4 spaces recommended
---------------------------------------------------------------------------------------------------
LINE BREAK:
  ... \                           the statement continues in the next line
  ...
---------------------------------------------------------------------------------------------------
INPUT / OUTPUT:
  input:
    var = input(prompt)           read from keyboard and convert to string
    var = input("x: ")            with label
  --------------------
  output:
    print("text", var)            print to screen, with newline
    print(..., sep="#")           print with given seperator
    print(..., end="...")         print with given symbol at the end, "" for no newline
---------------------------------------------------------------------------------------------------
OPERATORS:
  arithmetic:
    +                     addition
    -                     subtraction
    *                     multiplication
    /                     float division
    //                    integer division
    **                    exponent
    %                     remainder
  --------------------
  assignment:
    =
    +=
    -=
    *=
    /=
    //=
    %=
    **=
---------------------------------------------------------------------------------------------------
COMPARISON:
  <                       smaller
  >                       greater
  <=                      smaller or equal
  >=                      greater or equal
  !=                      not equal
  ==                      equal
  --------------------
  comparing strings:
    letter by letter
    smaller letter means the string is smaller
    shorter equal string means string is smaller
  --------------------
  comparing lists:
    needs same type of elements
---------------------------------------------------------------------------------------------------
LOGIC:
  and                     AND
  or                      OR
  not                     NOT
  --------------------
  chaining:
    ... <= ... < ...
---------------------------------------------------------------------------------------------------
VARIABLES:
  ... = ...               assignment
  ..., ... = ..., ...     multiple assignments

  NAME = ...              "constant", constants do not exist

  ...: ... = 20           set datatype, python 3.6
  age: int = 20

  id(...)                 return memory location
  --------------------
  scope:
    local                 declared and available anywhere in a function, overwrites global
    global                available anywhere
  --------------------
  naming convention:
    lowercase letters
    underscore
    numbers

    begins with letter or underscore
---------------------------------------------------------------------------------------------------
DATA TYPES:
  dynamically typed               data type is set automatically
  strongly typed                  no automatic type conversion
  --------------------
  number        0.1
  string        "..."
  list          [..., ...]              array
  tuple         (..., ...)              immutable array
  sequence
  set           {..., ...}              unordered list, unique elements
  dictionary    {...: ..., ...: ...}    key-value pairs
  --------------------
  boolean:
    bool

  number:
    int
    long
    float
    complex

  sequence:
    str
    bytes
    byte array                    mutable
    list                          mutable
    tuple
 
  set:
    set                           mutable
    frozen

  mapping:
    dict                          mutable

  casting:
    int(...)                      convert to integer
    float(...)
    bool(...)
    str(...)
  --------------------
  type(...)                       return data type
  isinstance(..., ...)            check if object belongs to a class, or data type
---------------------------------------------------------------------------------------------------
TYPE CONVERSION:
  integer + float becomes float

  ... = list(...)                 create list from tuple

  ... = tuple(...)                create tuple from list
---------------------------------------------------------------------------------------------------
SCOPE:
  local:
    variables are only available inside the function where they are declared
    overwrites global variables only inside a function
  --------------------
  global:
    variables are available anywhere
---------------------------------------------------------------------------------------------------
BOOLEAN:
  values:
    True
    False
  --------------------
  falsy values:
    ""
    0, 0.0
    [], (), {}
    None                          null
    False
  --------------------
  truthy values:
    everything else
---------------------------------------------------------------------------------------------------
NUMBERS:
  ... = 1                         integer
  ... = 1.0                       floating point
  ... = 2j                        complex
  ... = 2 + 3j
  ... = 9.11j
---------------------------------------------------------------------------------------------------
STRINGS:
  ... = '...'                     single quotes
  ... = "..."                     double quotes
  ... = ""                        empty
  ... = """..."""                 multiple lines

  escape characters:
    \n                            newline
    \t                            tab
    \\                            \
    \'                            '
    \"                            "

  concatenation:
    "..." + "..."                 two strings
    1 + "1"                       error
    f"{...} {...}"                using expressions

  repetition:
    "..." * ...                   repeat a string

  cannot change a character in a string
  can add to the end
---------------------------------------------------------------------------------------------------
LISTS:
  create:
    ... = ["...", ...]            create a list
    ... = []                      create empty list

  elements:
    ...[...]                      return element at index
    ...[-...]                     return element at index counting backwards
    ...[...:...]                  return elements from index to excluded index

  concatenation:
    ... = ... + ...               return new list with combined elements
    ... += ...                    combine elements

  repetition:
    ... = ... * ...               add multiple times
    ... *= ...                    
---------------------------------------------------------------------------------------------------
TUPLES:
  immutable list

  create:
    ... = (..., ..., ...)         create a tuple, optional brackets
    ... = ()                      empty tuple
    ... = (...,)                  tuple with one element
    ..., ... = (..., ...)         assign multiple variables
---------------------------------------------------------------------------------------------------
SETS:
  unordered list
  unique elements
  more efficient than a list

  create:
    ... = set()                   create empty set
    ... = {..., ...}              duplicate elements are removed
---------------------------------------------------------------------------------------------------
DICTIONARY:
  2 dimensional list, not ordered
  key value pairs

  create:
    ... = {}                      empty
    ... = {                       with key value pairs
      "..." : "...",
      "..." : "..."
    }

  elements:
    ...[...]                      show value for a key
    ...[...] = ...                add/update element
---------------------------------------------------------------------------------------------------
CLASS OBJECT:
  create:
    class ...(...):               capital letter, optional inherited parent class
      def __init__(self, ...):    optional constructor, arguments
        self. ...                 
        self.__... = ...          private, set to argument

      def ...(self, ...):         instance method
        ...

      __... = ...                 private variable
  --------------------
  object:
    ... = ...(...)                create object from class with constructor argument

    .attribute
    .method(arguments)
  --------------------
  getter:
    def get_name(self):           getter method
      return self.__name
  --------------------
  setter:
    det set_name(self, name):     setter method, usually with validation
      self.__name = name
  --------------------
  inheritance:
    class ...(..., ...):          inherits all methods of parent classes (..., ...)
      super().__init__()          calls parents class methods
      ...

    can overwrite parents methods

    object class:
      __new__()                   creates object
      __init__()                  initialize attributes
      __str__()                   return string representing the object
---------------------------------------------------------------------------------------------------
NUMBER METHODS:
  absolute:
    abs(...)                      return absolute value

  exponent:
    pow(a, b)                     return a^b

  round:
    round(..., ...)               round to closest integer, optional decimal points

  min max:
    min(..., ...)                 return smallest
    max(..., ...)                 return largest
  
  format:
    format(..., "...")            change format of number
      "5,.2f"                     total length: 5, , after three digits, 2 decimal points, float
      "%"                         as percentage
---------------------------------------------------------------------------------------------------
MATH FUNCTIONS:
  math.pi                         return pi
  math.e                          return e
  math.ceil(...)                  return next largest integer
  math.floor(...)                 return next smallest integer
  math.sqrt(...)                  return square root
---------------------------------------------------------------------------------------------------
STRING METHODS:
  length:
    .len(...)                     length of string

  search:
    .endswith(...)                return true if ends with ...
    .startswith(...)              return true if starts with ...
    .find(...)                    return first index of ..., else return -1
    .rfind(...)                   return last index of ..., else return -1
    .count(...)                   return number of occurrences of ...

  check:
    .isalpha()                    only letters
    .isalnum()                    only numbers

  membership:
    "..." in ...                  check if string exists in another string
    "..." not in ...              check if string not exists in another string

  replace:
    .replace(..., ...)            return new string with replaced substring

  substring:
    ...[...:...]                  return characters from index ... to excluding ...
    ...[:...]                     return characters up to index ...
    ...[...:]                     return characters from index ... to the end
    negative index counts from the end

  convert:
    .upper()                      return new string in uppercase
    .lower()                      return new string in lowercase
    .capitalize()                 retrun new string with first char capitalized
    .title()                      return new string with first char of every word capitalized
    .swapcase()                   return new string after swapping upper and lower
    .strip()                      return new string with no whitespace at beginning and end
    .strip("...")                 return new string with no ... at beginning and end
    .split(" ")                   return list, split at given character

  ascii:
    ord("...")                    return ASCII for character
    chr(...)                      return character for ASCII

  format:
    .center(...)                  return new string centered with total length
    .ljust(...)                   return new string on the left with total length
    .rjust(...)                   return new string on the right with total length
    format(..., "...")
---------------------------------------------------------------------------------------------------
LIST METHODS:
  create:
    ... = list(..., ...)          create list from entries
          list("...")             split string and create list
          list(range(...))        create list with range

  length:
    len(...)                      return number of elements

  sum:
    sum(...)                      return sum of elements

  min max:
    min(...)                      return smallest value
    max(...)                      return greatest value

  slice:
    ...[...:...]                  return list from ... to excluded ...
    ...[:...]                     return list from start to excluded ...
    ...[...:]                     return list from ... to end

  membership:
    ... in ...                    return true if element exists
    ... not in ...                return true if element not exists

  comprehension:
    ... = [expression for item in iterable if condition]

  add:
    .append(...)                  add to end of list
    .insert(..., ...)             insert at index, item
    .extend([...])                add elements to the end
    .extend("...")                split string and add to the end

  remove:
    .remove(...)                  remove first occurrence
    .pop()                        return last element and remove it
    .pop([...])                   return element at index and remove it
    .clear()                      remove all elements
    del ...[...]                  remove elememnt at index

  search:
    .index(...)                   return index of first occurence
    .count(...)                   return number of times element is found

  sort:
    .sort()                       sort low to high
    .reverse()                    reverse order

  combine:
    ... = list1 + list2           combine two lists
---------------------------------------------------------------------------------------------------
SET METHODS:
  add:
    add(...)                      add an element
    update(...)                   add multiple elements like list, tuple, string

  remove:
    remove(...)                   remove an element
    discard(...)                  like remove, but ignores error for not found
    clear()                       remove all elements

  compare:
    .issubset(...)                return true if all elements are part of ...
    .issuperset(...)              return true if all elements of ... are available

  combine:
    .union(...)                   return new set of combined elements
    ... = ... | ...               union
    .intersection(...)            return new set with elements in both sets
    ... = ... & ...               intersection
    .difference(...)              return new set with elements from ... removed
    ... = ... - ...               difference
    .symmetric_difference(...)    return new set with elements that are only in one set
    ... = ... ^ ...               symmetric difference
---------------------------------------------------------------------------------------------------
DICTIONARY METHODS:
  length:
    len(...)                      return number of elements

  remove:
    del ...["..."]                delete element
    .pop(...)                     return value for key and remove key
    .popitem()                    return a random element as tuple and remove it
    .clear()                      remove all elements

  search:
    ... in ...                    return true if exists
    ... not in...                 return true if not exists

  keys:
    .keys()                       return all keys

  values:
    .values()                     return all values
    .get(..., ...)                return value for key, else None, optional default instead of None

  copy:
    ... = ....copy()              create copy


    .items                        return tuples of elements
---------------------------------------------------------------------------------------------------
CONDITIONS:
  IF:
    if ...:                       if
      ...
    elif ...:                     elif
      ...
    else:                         else
      ...

    pass                          empty block
  --------------------
  TERNARY:
    ... = ... if ... else ...     statement1, condition, statement2
---------------------------------------------------------------------------------------------------
LOOPS:
  FOR:
    for ... in ...:               element in iterable data
      ...                         statement

    example:
      test = ["a", "b", "c"]
      for i in test:
        print i

    range:
      range(...)                  from 0 to exclusive ...
      range(..., ...)             from ... to exclusive ..., can be negative
      range(..., ..., ...)        from ... to exclusive ... with increment/decrement

      example:
        for i in range (3, 11, 2):
          print i                 i is 3, 5, 7, 9
  --------------------
  WHILE:
    i = 0;                        initial value
    while ...:                    condition
      ...                         statement
      i++;                        increment

    example:
      x = 0
      while x < 10:                   
        x += 1
  --------------------
  BREAK CONTINUE:
    break:
      for ...:                    exit parent loop if break gets called
        if ...:
          break
        ...

    continue:
      for ...:                    jump to next iteration is continue gets called
        if ...:
          continue
        ...
---------------------------------------------------------------------------------------------------
FUNCTIONS:
  declaration:
    def ...(..., ...) -> ...:     optional arguments, optional return type
      ...
      return ...                  optional, terminate, return None without
      return (..., ...)           multiple values as tuple
  --------------------
  arguments:
    ...(... = ...)                default
    ...(...: ...)                 data type
    ...(...: ... = ...)           default data type
    ...(*...)                     variable arguments as tuple
    ...(**...)                    variable arguments as keywords
  --------------------
  call:
    ...(...)                      call
    ...(...=...)                  call with keyword, order not important

    ... = ...(...)                call with assignment of return value
  --------------------
  always call after declaration
  if the argument is mutable, changes will be applied to it
---------------------------------------------------------------------------------------------------
FILE HANDLING:
  open:
    ... = open("...", "...")      path and mode, returns object
      "r"                         read
      "w"                         write, creates the file, or overwrites it
      "a"                         append, creates the file, or adds data to the end

    with open("...", "...") as file_object:   closes the file automatically
      ...
  --------------------
  close:
    .close()
  --------------------
  methods:
    .mode                         get mode for file
    .name                         get file name
    .read(...)                    return string of whole file, optional number of characters
    .readline()                   return string of single line
    .readlines()                  return list of strings of lines
    .write(...)                   return number of characters written after writing
    .seek(..., ...)               move file pointer
    .tell()                       return position of file pointer
  --------------------
  os:
    .path                         module
    .isfile(...)                  return true if file exists at path
    .rename(...)                  rename a file
    .remove(...)                  delete a file
    .listdir(r"...")              read filenames in directory
    .getcwd()                     reads current working directory
    .chdir(r"...")                switch to the directory
---------------------------------------------------------------------------------------------------
STUFF:
  urllib.urlopen("...")           open a connection to a website
  connection.read()
  connection.close()
  
  windows.exitonclick()           close windows on mouse click

  .is_integer()                   checks if a float is a whole number                                
---------------------------------------------------------------------------------------------------
  def fizz_buzz(input):
    if input % 3 == 0 and input % 5 == 0:
         return "fizzbuzz"
    elif input % 3 == 0:
        return "fizz"
    elif input % 5 == 0:
        return "buzz"
    else:
        return input