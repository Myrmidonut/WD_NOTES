SHELL:
  python                          open console
  quit()                          quit console
---------------------------------------------------------------------------------------------------
FILES:
  .py                             file ending
---------------------------------------------------------------------------------------------------
IMPORT:
  modules:
    import ...                    importing a module
      time
      webbrowser
      os                          renaming files, etc.
      turtle                      creating lines, shapes, etc.
      urllib                      connection to website
      math                        mathematics

  files:
    import filename               importing a file, for example for a class

  selected:
    from ... import ..., ...      only import the specified methods, variables
    from ... import *             import everything

  call:
    moduleName.methodName()       when using import
    methodName()                  when using from ... import

  content:
    classes
    functions
    variables
    constants
    ...

  later methods overwrite earlier ones with same call name
---------------------------------------------------------------------------------------------------
COMMENTS:
  #                               one line comment
  '''                             multiple lines
    ...
  '''
---------------------------------------------------------------------------------------------------
LINE BREAK:
  ... \                           the statement continues in the next line
  ...
---------------------------------------------------------------------------------------------------
OPERATORS:
  arithmetic:
    +                     addition
    -                     subtraction
    *                     multiplication
    /                     float division
    //                    integer division
    **                    exponent
    %                     remainder

  assignment:
    =
    +=
    -=
    *=
    /=
    //=
    %=
    **=

  type conversion:
    integer and float becomes float
---------------------------------------------------------------------------------------------------
COMPARISON:
  <                       smaller
  >                       greater
  <=                      smaller or equal
  >=                      greater or equal
  !=                      not equal
  ==                      equal

  comparing strings:
    letter by letter
    smaller letter means the string is smaller
    shorter equal string means string is smaller

  comparing lists:
    needs same type of elements
---------------------------------------------------------------------------------------------------
LOGIC:
  add                     AND
  or                      OR
  not                     NOT
---------------------------------------------------------------------------------------------------
CASTING:
  int(...)                convert to integer
  float(...)
  str(...)
---------------------------------------------------------------------------------------------------
VARIABLES:
  ... = ...               assignment
  ..., ... = ..., ...     multiple assignments
  NAME = ...              constant

  naming convention:
    letters
    underscore
    numbers

    begins with letter or underscore
---------------------------------------------------------------------------------------------------
SCOPE:
  local:
    variables are only available inside the function where they are declared
    overwrites global variables only inside a function

  global:
    variables are available anywhere
---------------------------------------------------------------------------------------------------
DATA TYPES:
  bool

  number:
    int
    long
    float
    complex

  sequence:
    str
    bytes
    byte array                    mutable
    list                          mutable
    tuple
 
  set:
    set                           mutable
    frozen

  mapping:
    dict                          mutable

  type(...)                       check data type
  isinstance(..., ...)            check if object belongs to a class, or data type
---------------------------------------------------------------------------------------------------
NUMBERS:
  ... = 1                         integer
  ... = 1.0                       floating point
  ... = 1j                        complex
        2 + 3j
        9.11j
---------------------------------------------------------------------------------------------------
STRINGS:
  ... = '...'                             single quotes
  ... = "..."                             double quotes
  ... = ""                                empty 

  characters:
    ...[...]                              return character at index ...

  escape characters:
    \n                            newline
    \t                            tab
    \\                            \
    \'                            '
    \"                            "

  concatenation:
    "..." + "..."                 two strings
    1 + "1"                       error

  repetition:
    "..." * ...                   repeat a string

  cannot change a character in a string
  can add to the end
---------------------------------------------------------------------------------------------------
BOOLS:
  True
  False

  falsy values:
    None
    False
    0, 0.0
    "", [], (), {}
---------------------------------------------------------------------------------------------------
LISTS:
  create:
    ... = ["...", ...]            create a list
    ... = []                      create empty list

  elements:
    ...[...]                      return element at index
    ...[-...]                     return element at index counting backwards
    ...[...:...]                  return elements ... to ...

  concatenation:
    ... = ... + ...               return new list with combined elements
    ... += ...                    combine elements

  repetition:
    ... = ... * ...               add multiple times
    ... *= ...                    
---------------------------------------------------------------------------------------------------
TUPLES:
  immutable list

  create:
    ... = (..., ..., ...)         create a tuple, optional brackets
    ... = ()                      empty tuple
    ... = (...,)                  tuple with one element
    ..., ... = (..., ...)         assign multiple variables
---------------------------------------------------------------------------------------------------
SETS:
  unordered list
  unique elements
  more efficient than a list

  create:
    ... = set()                   create empty set
    ... = {..., ...}              duplicate elements are removed

  add(...)                        add an element
  remove(...)                     remove an element
  discard(...)                    like remove, but ignores error for not found
  update(...)                     add multiple elements like list, tuple, string
  clear()                         remove all elements

  .issubset(...)                  return true if all elements are part of ...
  .issuperset(...)                return true if all elements of ... are available
  .union(...)                     return new set of combined elements
  ... = ... | ...                 union
  .intersection(...)              return new set with elements in both sets
  ... = ... & ...                 intersection
  .difference(...)                return new set with elements from ... removed
  ... = ... - ...                 difference
  .symmetric_difference(...)      return new set with elements that are only in one set
  ... = ... ^ ...                 symmetric difference
---------------------------------------------------------------------------------------------------
DICTIONARY:
  2 dimensional list, not ordered

  create:
    ... = {}                      empty
    ... = {                       with key, value pairs
      "..." : "...",
      "..." : "...",
    }

  elements:
    ...[...]                      show value for a key
    ...[...] = ...                add/update element
    del ...[...]                  delete element
    len(...)                      return number of elements
    ... in ...                    return true if exists
    ... not in...                 return true if not exists

  methods:
    .keys()                       return all keys
    .values()                     return all values
    .items                        return tuples of elements
    .get(..., ...)                return value for key, else None, optional default instead of None
    .pop(...)                     return value for key and remove key
    .popitem()                    return a random element as tuple and remove it
    ... = ....copy()              create copy
    .clear()                      remove all elements
---------------------------------------------------------------------------------------------------
CLASS OBJECT:
  create:
    class ...(...):               capital letter, optional inherited parent class
      def __init__(self, ...):    constructor, optional, automatic creation of empty constructor
        self. ...                 
        self.__... = ...          private, only available inside the object
      def ...(self, ...):         instance method
        ...

  object:
    ... = ...(...)                creat object from class with constructor argument

    .attribute
    .method(arguments)

  getter:
    def get_...(self):            accessor method
      return self....

  setter:
    det set_...(self, ...):       mutator method
      #validation
      self.... = ...

  inheritance:
    class ...(..., ...):          inherits all methods of parent classes (..., ...)
      super().__init__()          calls parents class methods
      ...

    can overwrite parents methods

    object class:
      __new__()                   creates object
      __init__()                  initialize attributes
      __str__()                   return string representing the object
  ---------------------------------------------------------------------------------------------------
NUMBER METHODS:
  absolute:
    abs(...)                      return absolute value

  exponent:
    pow(a, b)                     return a^b

  round:
    round(..., ...)               round to closest integer, optional decimal points

  min max:
    min(..., ...)                 return smallest
    max(..., ...)                 return largest
  
  format:
    format(..., "...")            change format of number
      "5,.2f"                     total length: 5, , after three digits, 2 decimal points, float
      "%"                         as percentage
---------------------------------------------------------------------------------------------------
MATH FUNCTIONS:
  math.pi                         return pi
  math.e                          return e
  math.ceil(...)                  return next largest integer
  math.floor(...)                 return next smallest integer
  math.sqrt(...)                  return square root
---------------------------------------------------------------------------------------------------
STRING METHODS:
  .len(...)                       length of string

  search:
    .endswith(...)                return true if ends with ...
    .startswith(...)              return true if starts with ...
    .find(...)                    return first index of ..., else return -1
    .rfind(...)                   return last index of ..., else return -1
    .count(...)                   return number of occurrences of ...

  membership:
    "..." in ...                  check if string exists in another string
    "..." not in ...              check if string not exists in another string

  replace:
    .replace(..., ...)            return new string with replaced substring

  slice:
    ...[...:...]                  return characters from index ... to ...
    ...[:...]                     return characters up to index ...
    ...[...:]                     return characters from index ... to the end
    negative index counts from the end

  convert:
    .upper()                      return new string in uppercase
    .lower()                      return new string in lowercase
    .capitalize()                 retrun new string with first char capitalized
    .title()                      return new string with first char of every word capitalized
    .swapcase()                   return new string after swapping upper and lower
    .strip()                      return new string with no whitespace at beginning and end
    .strip("..."")                return new string with no ... at beginning and end

  ascii:
    ord("...")                    return ASCII for character
    chr(...)                      return character for ASCII

  format:
    .center(...)                  return new string centered with total length
    .ljust(...)                   return new string on the left with total length
    .rjust(...)                   return new string on the right with total length
    format(..., "...")
---------------------------------------------------------------------------------------------------
LIST METHODS:
  list():
    ... = list(..., ...)          create list from entries
          list("...")             split string and create list
          list(range(...))        create list with range

  length:
    len(...)                      return number of elements

  sum:
    sum(...)                      return sum of elements

  min max:
    min(...)                      return smallest value
    max(...)                      return greatest value

  slice:
    ...[...:...]                  return list from ... to ...-1
    ...[:...]                     return list from start to ...-1
    ...[...:]                     return list from ... to end

  membership:
    ... in ...                    return true if element exists
    ... not in ...                return true if element not exists

  comprehension:
    ... = [expression for item in iterable if condition]

  add:
    .appends(...)                 add to end of list
    .insert(..., ...)             insert at index, item
    .extends([...])               add elements to the end
    .extends("...")               split string and add to the end

  remove:
    .remove(...)                  remove first occurrence
    .pop()                        return last element and remove it
    .pop([...])                   return element at index and remove it
    .clear()                      remove all elements

  search:
    .index(...)                   return index of first occurence
    .count(...)                   return number of times element is found

  sort:
    .sort()                       sort low to high
    .reverse()                    reverse order
---------------------------------------------------------------------------------------------------
INPUT / OUTPUT:
  input:
    var = input(prompt)           read from keyboard and convert to string

  output:
    print("text", var)            print to screen, with newline
    print(..., sep="#")           print with given seperator
    print(..., end="...")         print with given symbol at the end
---------------------------------------------------------------------------------------------------
IF:
  if condition:                   if
    command1
    command2
  elif condition:                 elif
    command1
    command2
  else:                           else
    command1
    command2

  if ... or ... :
---------------------------------------------------------------------------------------------------
FOR:
  for ... in ...:                 for
    command1
    command2

  example:
    test = ["a", "b", "c"]        example
    for i in test:
      print i

  range:
    range(...)                    from 0 to ...-1
    range(..., ...)               from ... to ...-1, can be negative
    range(..., ..., ...)          from ... to ...-1 with increment/decrement

    example:
      for i in range (3, 11, 2):
        print i                   i is 3, 5, 7, 9
---------------------------------------------------------------------------------------------------
WHILE:
  while condition:                while
    command1
    command2

  example:
    x = 0
    while x < 10:                   
      x += 1
---------------------------------------------------------------------------------------------------
BREAK CONTINUE:
  break:
    for ...:                      exit parent loop if break gets called
      if ...:
        break
      ...

  continue:
    for ...:                      jump to next iteration is continue gets called
      if ...:
        continue
      ...
---------------------------------------------------------------------------------------------------
FUNCTIONS:
  declaration:
    def ...(..., ...):            zero or more arguments
      ...
      return ...                  optional, terminate, return None without

    def ...(...=...)              with default value for argument

  call:
    ...(...)                      call
    ...(...=...)                  call with keyword, order not important

    ... = ...(...)                call with assignment of return value

  always call after declaration
  if the argument is mutable, changes will be applied to it
---------------------------------------------------------------------------------------------------
FILE HANDLING:
  open:
    ... = open("...", "...")      path and mode, returns object
      "r"                         read
      "w"                         write, creates the file, or overwrites it
      "a"                         append, creates the file, or adds data to the end

    with open("...", "...") as file_object:   closes the file automatically
      ...

  close:
    .close()

  methods:
    .read(...)                    return string of specified amount of characters, or whole file
    .readline()                   return string of single line
    .readlines()                  return list of strings of lines
    .write(...)                   return number of characters written after writing
    .seek(..., ...)               move file pointer
    .tell()                       return position of file pointer

  os.path                         module
    .isfile(...)                  return true if file exists at path
---------------------------------------------------------------------------------------------------
STUFF:
  urllib.urlopen("...")           open a connection to a website
  connection.read()
  connection.close()
  os.rename()                     rename a file
  os.listdir(r"...")              read filenames in directory
  os.getcwd()                     reads current working directory
  os.chdir(r"...")                switch to the directory
  windows.exitonclick()           close windows on mouse click

  .is_integer()                   checks if a float is a whole number                                
---------------------------------------------------------------------------------------------------