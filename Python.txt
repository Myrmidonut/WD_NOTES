CONSOLE:
  python                          open console
  quit()                          quit console
---------------------------------------------------------------------------------------------------
FILES:
  #! /usr/bin/python              location of python
  .py                             file ending
---------------------------------------------------------------------------------------------------
IMPORT:
  libraries:
    import ...                    importing a library
      time
      webbrowser
      os                          renaming files, etc.
      turtle                      creating lines, shapes, etc.
      urllib                      connection to website

  files:
    import filename               importing a file, for example for a class
---------------------------------------------------------------------------------------------------
COMMENTS:
  #                               one line comment
  '''                             multiple lines
    ...
  '''
---------------------------------------------------------------------------------------------------
LINE BREAK:
  ... \                           the statement continues in the next line
  ...
---------------------------------------------------------------------------------------------------
OPERATORS:
  arithmetic:
    +                     addition
    -                     subtraction
    *                     multiplication
    /                     float division
    //                    integer division
    **                    exponent
    %                     remainder

  assignment:
    =
    +=
    -=
    *=
    /=
    //=
    %=
    **=

  type conversion:
    integer and float becomes float
---------------------------------------------------------------------------------------------------
COMPARISON:
  <                       smaller
  >                       greater
  <=                      smaller or equal
  >=                      greater or equal
  !=                      not equal
  ==                      equal

  comparing strings:
    letter by letter
    smaller letter means the string is smaller
    shorter equal string means string is smaller

  comparing lists:
    needs same type of elements
---------------------------------------------------------------------------------------------------
LOGIC:
  add                     AND
  or                      OR
  not                     NOT
---------------------------------------------------------------------------------------------------
CASTING:
  int(...)                convert to integer
  float(...)
  str(...)
---------------------------------------------------------------------------------------------------
VARIABLES:
  ... = ...               assignment
  ..., ... = ..., ...     multiple assignments
  NAME = ...              constant

  naming convention:
    letters
    underscore
    numbers

    begins with letter or underscore
---------------------------------------------------------------------------------------------------
DATA TYPES:
  int
  float
  str
  bool
  list
  dictionary

  type(...)                       check data type
---------------------------------------------------------------------------------------------------
NUMBERS:
  ... = 1                         integer
  ... = 1.0                       floating point
  ... = 1j                        complex
        2 + 3j
        9.11j
---------------------------------------------------------------------------------------------------
STRINGS:
  ... = '...'                             single quotes
  ... = "..."                             double quotes
  ... = ""                                empty 

  characters:
    ...[...]                              return character at index ...

  escape characters:
    \n                            newline
    \t                            tab
    \\                            \
    \'                            '
    \"                            "

  concatenation:
    "..." + "..."                 two strings
    1 + "1"                       error

  repetition:
    "..." * ...                   repeat a string

  cannot change a character in a string
  can add to the end
---------------------------------------------------------------------------------------------------
BOOLS:
  True
  False

  falsy values:
    None
    False
    0, 0.0
    "", [], (), {}
---------------------------------------------------------------------------------------------------
LISTS:
  ... = ["...", ...]              create a list
  ... = []                        create empty list

  elements:
    ...[...]                      return element at index
    ...[-...]                     return element at index counting backwards
    ...[...:...]                  return elements ... to ...

  tuple:
    ... = (..., ..., ...)         cannot be overwritten

  concatenation:
    ... = ... + ...               return new list with combined elements
    ... += ...                    combine elements

  repetition:
    ... = ... * ...               add multiple times
    ... *= ...                    
---------------------------------------------------------------------------------------------------
DICTIONARY:
  name = {}                       2 dimensional list, not ordered
  name[...] = ...                 key - value pair
  name.keys()                     access to keys
  name.values()                   access to values

  list = {}                       example
  list["Sam"] = 1
  list["Otto"] = 2
  for i in list:
    print i + str(list[i])
---------------------------------------------------------------------------------------------------
CLASS:
  class ...
    data
    methods
---------------------------------------------------------------------------------------------------
NUMBER METHODS:
  absolute:
    abs(...)                      return absolute value

  exponent:
    pow(a, b)                     return a^b

  round:
    round(..., ...)               round to closest integer, optional decimal points

  min max:
    min(..., ...)                 return smallest
    max(..., ...)                 return largest
  
  format:
    format(..., "...")            change format of number
      "5,.2f"                     total length: 5, , after three digits, 2 decimal points, float
      "%"                         as percentage
---------------------------------------------------------------------------------------------------
MATH FUNCTIONS:
  math.pi                         return pi
  math.e                          return e
  math.ceil(...)                  return next largest integer
  math.floor(...)                 return next smallest integer
  math.sqrt(...)                  return square root
---------------------------------------------------------------------------------------------------
STRING METHODS:
  .len(...)                       length of string

  search:
    .endswith(...)                return true if ends with ...
    .startswith(...)              return true if starts with ...
    .find(...)                    return first index of ..., else return -1
    .rfind(...)                   return last index of ..., else return -1
    .count(...)                   return number of occurrences of ...

  membership:
    "..." in ...                  check if string exists in another string
    "..." not in ...              check if string not exists in another string

  replace:
    .replace(..., ...)            return new string with replaced substring

  slice:
    ...[...:...]                  return characters from index ... to ...
    ...[:...]                     return characters up to index ...
    ...[...:]                     return characters from index ... to the end
    negative index counts from the end

  convert:
    .upper()                      return new string in uppercase
    .lower()                      return new string in lowercase
    .capitalize()                 retrun new string with first char capitalized
    .title()                      return new string with first char of every word capitalized
    .swapcase()                   return new string after swapping upper and lower
    .strip()                      return new string with no whitespace at beginning and end
    .strip("..."")                return new string with no ... at beginning and end

  ascii:
    ord("...")                    return ASCII for character
    chr(...)                      return character for ASCII

  format:
    .center(...)                  return new string centered with total length
    .ljust(...)                   return new string on the left with total length
    .rjust(...)                   return new string on the right with total length
    format(..., "...")
---------------------------------------------------------------------------------------------------
LIST METHODS:
  list():
    ... = list(..., ...)          create list from entries
          list("...")             split string and create list
          list(range(...))        create list with range

  length:
    len(...)                      return number of elements

  sum:
    sum(...)                      return sum of elements

  min max:
    min(...)                      return smallest value
    max(...)                      return greatest value

  slice:
    ...[...:...]                  return list from ... to ...-1
    ...[:...]                     return list from start to ...-1
    ...[...:]                     return list from ... to end

  membership:
    ... in ...                    return true if element exists
    ... not in ...                return true if element not exists

  comprehension:
    ... = [expression for item in iterable if condition]

  add:
    .appends(...)                 add to end of list
    .insert(..., ...)             insert at index, item
    .extends([...])               add elements to the end
    .extends("...")               split string and add to the end

  remove:
    .remove(...)                  remove first occurrence
    .pop()                        return last element and remove it
    .pop([...])                   return element at index and remove it
    .clear()                      remove all elements

  search:
    .index(...)                   return index of first occurence
    .count(...)                   return number of times element is found

  sort:
    .sort()                       sort low to high
    .reverse()                    reverse order
---------------------------------------------------------------------------------------------------
INPUT / OUTPUT:
  input:
    var = input(prompt)           read from keyboard and convert to string

  output:
    print("text", var)            print to screen, with newline
    print(..., sep="#")           print with given seperator
    print(..., end="...")         print with given symbol at the end

FUNCTIONS:
  def name():                     creating a function
    command1()
    command2()

  name()                          calling the function
---------------------------------------------------------------------------------------------------
IF:
  if condition:                   if
    command1
    command2
  elif condition:                 elif
    command1
    command2
  else:                           else
    command1
    command2

  if ... or ... :
---------------------------------------------------------------------------------------------------
FOR:
  for ... in ...:                 for
    command1
    command2

  example:
    test = ["a", "b", "c"]        example
    for i in test:
      print i

  range:
    range(...)                    from 0 to ...-1
    range(..., ...)               from ... to ...-1, can be negative
    range(..., ..., ...)          from ... to ...-1 with increment/decrement

    example:
      for i in range (3, 11, 2):
        print i                   i is 3, 5, 7, 9
---------------------------------------------------------------------------------------------------
WHILE:
  while condition:                while
    command1
    command2

  example:
    x = 0
    while x < 10:                   
      x += 1
---------------------------------------------------------------------------------------------------
BREAK CONTINUE:
  break:
    for ...:                      exit parent loop if break gets called
      if ...:
        break
      ...

  continue:
    for ...:                      jump to next iteration is continue gets called
      if ...:
        continue
      ...
---------------------------------------------------------------------------------------------------
FUNCTIONS:
  declaration:
    ...(..., ...)










  print("...") + ...              outputting to the screen

  open("...")                     open a file
  urllib.urlopen("...")           open a connection to a website
  connection.read()
  connection.close()
  os.rename()                     rename a file
  os.listdir(r"...")              read filenames in directory
  os.getcwd()                     reads current working directory
  os.chdir(r"...")                switch to the directory
  windows.exitonclick()           close windows on mouse click

  .is_integer()                   checks if a float is a whole number




                                  
---------------------------------------------------------------------------------------------------
in file media.pny
class Movie():                                              creating a class, should be in its own file
    """Text"""                                              __doc__ class variable
    VALID_RATINGS = ["G", "PG"]                             class variable, allcaps for const
    def __init__(self, movie_title, movie_story,            constructor, self
    trailer_youtube):                   
        self.title = movie_title                            instance variable
        self.story = movie_story            
        self.trailer_youtube_url = trailer_youtube  
    def name(self):                                         instance method
        webbrowser.open(self.trailer_youtube_url)

toy_story = media.Movie("Toy Story", "Toys come to life",   creating an instance of the class
            "Youtube Link")
print(media.Movie.valid_ratings)
print(toy_story.storyline)
print(media.Movie.__doc__)                                  predefined class variable, doc
print(media.Movie.__name__)                                 name of class
print(media.Movie.__module__)                               name of module where the class is defined

inheritance:
class Parent():
    def __init__(self, last_name):
        print("Parent constructor Called")
        self.last_name = last_name

class Child(Parent):
    def __init__(self, last_name, number_of_toys):
        print("Child constructor Called")
        Parent.__init__(self, last_name)                    Child calls Parent constructor
        self.number_of_toys = number_of_toys

method overriding:
a method in Child with the same name as in Parent will override it
