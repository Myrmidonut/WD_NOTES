PACKAGES:
  express-graphql
  graphql

  Express, GraphQL, JWT, SQL:
    express
    graphql
    express-graphql
    body-parser
    bcrypt
    express-jwt
    jsonwebtoken
    dotenv
    sequelize
    mysql2
---------------------------------------------------------------------------------------------------
GRAPHIQL:
  app.use("/graphql", graphqlHttp({
    grapiql: true
  }))
---------------------------------------------------------------------------------------------------
SCHEMA:
  const schema = buildSchema(`
    type Query {
      name: String
    }
  `)
  --------------------
  TYPE:
    type User {
      id: Int
      name: String
    }
  --------------------
  QUERY:
    type Query {                          read data
      users: [User]                       array of users
      user(id: Int): User                 single user
    }
  --------------------
  MUTATION:
    type Mutation {                       change data
      createUser(name: String): User
    }
  --------------------
  INPUT:
    type ...Input
---------------------------------------------------------------------------------------------------
ROOT:
  contains resolvers
  called by the schema
  --------------------
  const root = {                                root
    myFunc: function({arg1, arg2}) {            resolver
      ...
      return ...
    }
  }
---------------------------------------------------------------------------------------------------
EXPRESS:
  app.js:
    const express = require("express")
    const graphqlHttp = require("express-graphql")
    const { buildSchema } = require("graphql")

    const app = express()

    const schema = buildSchema(`                        schema
      type Query {
        name: String!
      }
    `)

    const root = {                                      root
      random: () => {                                   resolver for API endpoint
        return Math.random()
      }
    }

    app.use("/graphql", graphqlHttp({                   use GraphQL
      schema: schema,
      rootValue: root,
      graphiql: true
    }))

    app.listen(3000)
  --------------------
  GraphiQL:
    {
      random
    }
---------------------------------------------------------------------------------------------------
FRONTEND:
  mutation {
    createMessage(input: {
      author: "andy",
      content: "hope is a good thing",
    }) {
      id
    }
  }
---------------------------------------------------------------------------------------------------
EXAMPLE WITH AUTH:
  server.js:
    const express = require("express")
    const bodyParser = require("body-parser")
    const jwt = require("express-jwt")
    const graphqlHTTP = require('express-graphql');
    require("dotenv").config()

    const schema = require("./graphql/schema")
    const root = require("./graphql/root")
    const port = 3000
    const app = express()

    const auth = jwt({
      secret: process.env.JWT_SECRET,
      credentialsRequired: false
    })

    app.use(bodyParser.json())
    app.use(auth)

    app.use((err, req, res, next) => {
      if (err.name === 'UnauthorizedError') {
        console.log("Bad token.")
      }

      next()
    });

    app.use('/graphql', graphqlHTTP(req => ({
      schema: schema,
      rootValue: root,
      context: {
        req: req
      },
      graphiql: true
    })))

    app.listen(port, () => {
      console.log(`Express server running on http://localhost:${port}/graphql`)
    })
  --------------------
  graphql/schema.js:
    const { buildSchema } = require("graphql")

    const schema = buildSchema(`
      type User {
        id: Int!
        username: String!
        email: String!
      }

      type Query {
        me: User
      }

      type Mutation {
        signup (username: String!, email: String!, password: String!): String
        login (email: String!, password: String!): String
      }
    `)

    module.exports = schema
  --------------------
  graphql/root.js:
    const bcrypt = require("bcrypt")
    const jsonwebtoken = require("jsonwebtoken")
    const { User } = require('../models')

    const root = {
      async me(args, { req }) {
        if (!req.user) {
          throw new Error('You are not authenticated.')
        }

        return await User.findByPk(req.user.id)
      },

      async signup({ username, email, password }) {
        const old_user = await User.findOne({ where: { email } })

        if (old_user) {
          throw new Error('Email already registered.')
        }

        const user = await User.create({
          username,
          email,
          password: await bcrypt.hash(password, 10)
        })

        return jsonwebtoken.sign(
          { id: user.id, email: user.email },
          process.env.JWT_SECRET,
          { expiresIn: '1y' }
        )
      },

      async login({ email, password }) {
        const user = await User.findOne({ where: { email } })

        if (!user) {
          throw new Error('No user with that email.')
        }

        const valid = await bcrypt.compare(password, user.password)

        if (!valid) {
          throw new Error('Incorrect password.')
        }

        return jsonwebtoken.sign(
          { id: user.id, email: user.email },
          process.env.JWT_SECRET,
          { expiresIn: '1d' }
        )
      }
    }

    module.exports = root