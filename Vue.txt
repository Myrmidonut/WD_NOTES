CLI:
  install:
    npm install -g @vue/CLI

  create:
    vue create ...

  server:
    npm run serve

  build:
    npm run build
---------------------------------------------------------------------------------------------------
SCRIPT:
  development:
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  --------------------
  production:
    <script src="https://cdn.jsdelivr.net/npm/vue"></script>
---------------------------------------------------------------------------------------------------
VUE INSTANCE:
  root element
  --------------------
  index.html:
    <div id="app">                              element
      {{ message }}
    </div>

    <script src="index.js"></script>
  --------------------
  index.js:
    const app = new Vue({                       create instance
      el: "#app",                               target element
      data: {                                   data
        message: "Hello Vue"
      },
      computed: {                               computed
        test: function() {...}
      },
      methods: {                                method
        reverse: function() {...}
      },
      mounted: function() {...}                 lifecycle hook
    })

    app.message = "..."                         change data
  --------------------
  changes to data trigger rerender
  --------------------
  methods:
    app.$watch("a", function(new, old) {...})   runs when app.a changes
  --------------------
  lifecycle hooks:
    mounted: function() {...}
    updated
    destroyed
---------------------------------------------------------------------------------------------------
COMPONENTS:
  every component gets its own instance
  one root element
  --------------------
  index.html:
    <div id="app">
      <todo-item></todo-item>
    </div>
  --------------------
  index.js:
    Vue.component("todo-item", {
      props: [..., ...],
      data: function() {return {...}},          has to be a function
      computed: {...},
      watch: {...}
      template: `<li>...</li>`,                 `...` or "..." with newline characters
      methods: {...: ...}
    })
---------------------------------------------------------------------------------------------------
INTERPOLATION:
  can contain a single expression
  --------------------
  {{ ... }}                                     text
  --------------------
  v-text:                                       text
    <div v-text="message">
  --------------------
  v-html:                                       html
    <div v-html="message">
  --------------------
  v-bind:                                       attribute
    <div v-bind:title="message">

    <div v-bind:disabled="isDisabled">          null, undefined, false

    <div :title="message">                      shorthand
---------------------------------------------------------------------------------------------------
DIRECTIVES:
  v-bind
  v-if                                          condition
  v-show                                        condition
  v-for                                         loop
  v-on                                          event
  v-model                                       two way binding
---------------------------------------------------------------------------------------------------
CONDITIONAL RENDERING:
  v-if:                                         if
    <div v-if="...">                            display if true
  
  v-else-if:                                    else if
    <div v-else-if="...">
  
  v-else:                                       else
    <div v-else>
  
  shared elements dont get rerendered
  key="..." triggers rerender
  use for rare changes
  --------------------
  v-show:                                       v-show
    <div v-show="...">

  always rendered, but sets display: none
  use for many changes
---------------------------------------------------------------------------------------------------
LIST RENDERING:
  array and object:
    <li v-for="item in items">                  loop over items
      {{ item.text }}
    </li>

    <li v-for="item of items">                  alternative with of
  --------------------
  key:
    v-bind:key="item.id"                        use key for tracking
  --------------------
  array:
    <li v-for="(item, index) in items">         with index
  --------------------
  object:
    <li v-for="(value, key) in items">          with key and value
  --------------------
  range:
    <li v-for="n in 10">                        10 times, starts at 1
---------------------------------------------------------------------------------------------------
EVENTS:
  click:
    <button v-on:click="myFunc">                runs method
    <button v-on:click="myFunc(...)">           with argument
    <button v-on:click="myFunc($event)          access to element

    <button @click="myFunc">                    shorthand
    
    <button v-on:click.prevent="myFunc">        prevent default
  --------------------
  click modifiers:
    .stop                                       prevents propagation
    .prevent                                    disables submit behavior
    .capture                                    run first when inner element was targeted
    .self                                       ignore events on inner elements
    .once
    .passive
  --------------------
  mouse modifiers:
    .left                                       
    .right
    .middle
  --------------------
  keyup:
    <input v-on:keyup.enter="...">
---------------------------------------------------------------------------------------------------
FORMS:
  elements:
    input
    textarea
    select

  default values are ignored
  syncs after input event
  --------------------
  v-model:                                      two way binding
    data: {
      message: "..."
    }

    {{ message }}
    <input v-model="message">                   input
  --------------------
  modifiers:
    .lazy                                       sync every change
    .number                                     convert to number
    .trim                                       remove whitespace
---------------------------------------------------------------------------------------------------
ARRAYS:
  Vue cannot detect changes to individual elements

  data: {
    items: [1, 2, 3],
    user: {
      name: "..."
    }
  }

  Vue.set(app.items, index, newValue)           change element
  Vue.set(app.user, "key", value)               add object property
---------------------------------------------------------------------------------------------------
DATA:
  data: {                                       data storage
    key1: value1,
    key2: value2
  }

  this.key1                                     use entry
---------------------------------------------------------------------------------------------------
COMPUTED:
  runs only when its data has changed
  uses previous result instead
  --------------------
  <div>{{ message }}</div>

  computed: {                                   computed storage
    message: function() {
      return ...
    }
  }
---------------------------------------------------------------------------------------------------
METHODS:
  runs every time when called
  --------------------
  methods: {                                    method storage
    key: function() {
      ...
    }
  }

  key()                                         use method
---------------------------------------------------------------------------------------------------
PROPS:
  data gets passed to template via props

  index.js:
    Vue.component("todo-item", {
      props: ["todo"],                          props
      template: "<li>{{ todo.text }}</li>       template
    })

    data: {
      groceryList: [                            data
        { id: 0, text: "..." },
        { id: 1, text: "..." }
      ]
    }

  index.html:
    <todo-item
      v-for="item in grocerList"                loop
      v-bind:todo="item"                        todo prop
      v-bind:key="item.id">                     required key
    </todo-item>
---------------------------------------------------------------------------------------------------
TEMPLATE:
  <template v-if="true">                        hidden outer element
    ...
  </template>
---------------------------------------------------------------------------------------------------
CLASSES:
  v-bind:class="{..., ...}"                     multiple classes
  v-bind:class="{ active: isActive == true}     show active class if isActive == true
  v-bind:class="[ {...: ...}, ... ]             array
  --------------------
  v-bind:class="myClass"                        alternative

  data: {
    myClass: {
      ...: ...,
      ...: ...
    }
  }
---------------------------------------------------------------------------------------------------
STYLE:
  v-bind:style="{ ... }
  :style
---------------------------------------------------------------------------------------------------
SLOTS:

---------------------------------------------------------------------------------------------------