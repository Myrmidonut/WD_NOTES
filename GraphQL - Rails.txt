SETUP:
  rails new ... --api
  rails db:create

  gem "graphql"                         GraphQL
  gem "bcrypt"                          secure password
  gem development "graphiql-rails"      GraphiQL
  gem "jwt"                             authorization token

  bundle update

  rails g graphql:install
---------------------------------------------------------------------------------------------------
GRAPHIQL:
  config/application.rb:
    require "sprockets/railtie"
  --------------------
  config/routes.eb:
    Rails.application.routes.draw do
      if Rails.env.development?
        mount GraphiQL::Rails::Engine, at: "/graphiql", graphql_path: "/graphql"
      end
    end
  --------------------
  GraphiQL:
    https://localhost:3000/graphiql
---------------------------------------------------------------------------------------------------
QUERIES:
  model:
    rails g model Link url:string description:text
    rails db:migrate
  --------------------
  console:  
    Link.create url: "...", description: "..."
  --------------------
  type:
    app/graphql/types/link_type.rb:
      module Types
        class LinkType < BaseObject                     model name
          field :id, ID, null: false                    same fields as model
          field :url, String, null: false               
          field :description, String, null: false
        end
      end
  --------------------
  resolver:
    app/graphql/types/query_type.rb:
      module Types
        class QueryType < Types::BaseObject
          field :all_links, [LinkType], null: false

          def all_links                                 query as allLinks
            Link.all
          end
        end
      end
  --------------------
  graphiql:
    query {
      allLinks {
        id
        description
        url
      }
    }
---------------------------------------------------------------------------------------------------
MUTATIONS:
  parent of all mutations:
    app/graphql/mutations/base_mutation.rb:
      module Mutations
        class BaseMutation < GraphQL::Schema::Mutation
          null false
        end
      end
  --------------------
  mutation with arguments:
    app/graphql/mutations/create_link.rb:
      module Mutations
        class CreateLink < BaseMutation
          argument :description, String, required: true     passed to resolver
          argument :url, String, required: true

          type Types::LinkType                              return type

          def resolve(description: nil, url: nil)
            Link.create!(
              description: description,
              url: url,
            )
          end
        end
      end
  --------------------
  mutation type:
    app/graphql/types/mutation_type.rb:
      module Types
        class MutationType < Types::BaseObject
          field :create_link, mutation: Mutations::CreateLink
        end
      end
---------------------------------------------------------------------------------------------------
AUTHENTICATION:
  encrypt password with bcrypt
  --------------------
  model:
    rails g model User name email password_digest
    rails db:migrate

    app/models/user.rb:
      class User < ApplicationRecord
        has_secure_password

        validates :name, presence: true
        validates :email, presence: true, uniqueness: true
      end
  --------------------
  user type:
    app/graphql/types/user_type.rb:
      module Types
        class UserType < BaseObject
          field :id, ID, null: false
          field :name, String, null: false
          # we are exposing `email` just for tutorial purposes
          # in real application shouldn't leak user emails
          field :email, String, null: false
        end
      end
  --------------------
  authentication type:
    app/graphql/tyes/auth_provider_email_input.rb:
      module Types
        class AuthProviderEmailInput < BaseInputObject
          graphql_name "AUTH_PROVIDER_EMAIL"

          argument :email, String, required: true
          argument :password, String, required: true
        end
      end
  --------------------
  mutation:
    app/graphql/mutations/create_user.rb:
      module Mutations
        class CreateUser < BaseMutation
          class AuthProviderSignupData < Types::BaseInputObject
            argument :email, Types::AuthProviderEmailInput, required: false
          end

          argument :name, String, required: true
          argument :auth_provider, AuthProviderSignupData, required: false

          type Types::UserType

          def resolve(name: nil, auth_provider: nil)
            User.create!(
              name: name,
              email: auth_provider&.[](:email)&.[](:email),
              password: auth_provider&.[](:email)&.[](:password)
            )
          end
        end
      end
  --------------------
  mutation type:
    module Types
      class MutationType < Types::BaseObject
        field :create_user, mutation: Mutations::CreateUser
        field :create_link, mutation: Mutations::CreateLink
      end
    end
  --------------------
  GraphiQL:
    mutation {
      createUser (
        name: "Jim",
        authProvider: {
          email: {
            email: "jim@mail.com",
            password: "1234"
          }
        }
      ) {
        id
        email
        name
      }
    }
---------------------------------------------------------------------------------------------------
SIGN IN:
  create token for users with jwt
  --------------------
  mutation:
    app/graphql/mutations/sign_in_user.rb:
      module Mutations
        class SignInUser < BaseMutation
          null true

          argument :email, Types::AuthProviderEmailInput, required: false

          field :token, String, null: true
          field :user, Types::UserType, null: true

          def resolve(email: nil)
            return unless email

            user = User.find_by email: email[:email]

            return unless user
            return unless user.authenticate(email[:password])

            crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
            token = crypt.encrypt_and_sign("user-id:#{ user.id }")

            { user: user, token: token }
          end
        end
      end
  --------------------
  mutation type:
    app/graphql/types/mutations_type.rb:
      module Types
        class MutationType < BaseObject
          field :create_user, mutation: Mutations::CreateUser
          field :create_link, mutation: Mutations::CreateLink
          field :signin_user, mutation: Mutations::SignInUser
        end
      end
---------------------------------------------------------------------------------------------------
AUTHENTICATION REQUESTS:
  app/controllers/graphql_controller.rb:
    ...
    context = {
      session: session,
      current_user: current_user
    }
    ...

    private

    def current_user
      # if we want to change the sign-in strategy, this is the place to do it
      return unless session[:token]

      crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
      token = crypt.decrypt_and_verify session[:token]
      user_id = token.gsub('user-id:', '').to_i
      User.find_by id: user_id
    rescue ActiveSupport::MessageVerifier::InvalidSignature
      nil
    end

    ...
---------------------------------------------------------------------------------------------------
LINKING USERS:
  rails g migration add_user_id_link
  --------------------
  migration:
    db/migrate/...add_user_id_link.rb:
      class AddUserIdLink < ActiveRecord::Migration[5.2]
        def change
          change_table :links do |t|
            t.references :user, foreign_key: true
          end
        end
      end
  --------------------
  rails db:migrate
  --------------------
  model:
    class Link < ApplicationRecord
      belongs_to :user
    end
  --------------------
  type:
    app/graphql/types/link_type.rb:
      module Types
        class LinkType < BaseObject
          field :id, ID, null: false
          field :url, String, null: false
          field :description, String, null: false
          field :posted_by, UserType, null: true, method: :user
        end
      end
  --------------------
  resolver:
    app/graphql/mutations/create_link.rb:
      module Mutations
        class CreateLink < BaseMutation
          argument :description, String, required: true
          argument :url, String, required: true

          type Types::LinkType

          def resolve(description: nil, url:nil)
            Link.create!(
              description: description,
              url: url,
              user: context[:current_user]
            )
          end
        end
      end
---------------------------------------------------------------------------------------------------
TESTING:
  mutations tests:
    test/graphql/mutations/
  --------------------
  create_link_test.rb:
    require 'test_helper'

    class Mutations::CreateLinkTest < ActiveSupport::TestCase
      def perform(user: nil, **args)
        Mutations::CreateLink.new(object: nil, context: {}).resolve(args)
      end

      test 'create a new link' do
        link = perform(
          url: 'http://example.com',
          description: 'description',
        )

        assert link.persisted?
        assert_equal link.description, 'description'
        assert_equal link.url, 'http://example.com'
      end
    end
  --------------------
  create_user_test.rb:
    require 'test_helper'

    class Mutations::CreateUserTest < ActiveSupport::TestCase
      def perform(args = {})
        Mutations::CreateUser.new(object: nil, context: {}).resolve(args)
      end

      test 'create new user' do
        user = perform(
          name: 'Test User',
          auth_provider: {
            email: {
              email: 'email@example.com',
              password: '[omitted]'
            }
          }
        )

        assert user.persisted?
        assert_equal user.name, 'Test User'
        assert_equal user.email, 'email@example.com'
      end
    end
  --------------------
  sign_in_user_test.rb:
    require 'test_helper'

    class Mutations::SignInUserTest < ActiveSupport::TestCase
      def perform(args = {})
        Mutations::SignInUser.new(object: nil, context: { session: {} }).resolve(args)
      end

      def create_user
        User.create!(
          name: 'Test User',
          email: 'email@example.com',
          password: '[omitted]',
        )
      end

      test 'success' do
        user = create_user

        result = perform(
          email: {
            email: user.email,
            password: user.password
          }
        )

        assert result[:token].present?
        assert_equal result[:user], user
      end

      test 'failure because no credentials' do
        assert_nil perform
      end

      test 'failure because wrong email' do
        create_user
        assert_nil perform(email: { email: 'wrong' })
      end

      test 'failure because wrong password' do
        user = create_user
        assert_nil perform(email: { email: user.email, password: 'wrong' })
      end
    end