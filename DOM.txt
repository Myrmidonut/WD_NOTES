DOM:
  Document Object Model
---------------------------------------------------------------------------------------------------
HTML elements are turned into JavaScript objects
---------------------------------------------------------------------------------------------------
SELECT:
  document.getElementById("...")                select id
  document.getElementsByClassName("...")        select class, creates nodelist
  document.getElementsByClassName("...")[...]   [] to select just one
  document.getElementsByTagName("...")          select tag, creates nodelist

  document.querySelector("...")                 needs CSS style selectors, #..., selects only the first one
  document.querySelectorAll("...")              needs CSS style selectors, selects all elements, creates nodelist

  var h1 = document.querySelector("h1");        selects h1 and saves it in a variable
---------------------------------------------------------------------------------------------------
MANIPULATION WITH classList:      
  tag.classList.add("...");                 adds css-class/id to an element tag
  tag.classList.remove("...");              removes it
  tag.classList.toggle("...");              toggles it
    document.body.classList.toggle("...")   example

  .some-class {                             example, adds color red to "highlight"
    color: red;
  }
  var tag = document.getElementById("highlight"); 
  tag.classList.add("some-class");
---------------------------------------------------------------------------------------------------
MANIPULATION:
  .innerHTML = "...";                       changes text or code inside a tag, includes code
  .textContent = "...";                     sets the text without code

  .style                                    change styling
    .color = "..."
    .fontSize = "..."
    .top = "..."
    .display = "..."
      "none"                                remove element from page
      "block"                               show element

  .getAttribute("...");   
  .setAttribute("...", "...");              change attribute: name, value

  .onclick;                                 action on clicking
-----
  document.getElementById("...").innerHTML = "...";
  document.getElementById("...").onclick = function() {statements}
-----
EVENTS:
  element.addEventListener("type", function);     runs a function when an event happens
    click                                         mouseclicks
    change                                        text input, mouseclicks, etc., needs to lose focus for change
    input                                         same as above without need for focus loss
    mouseover                                     mouse moves over an element, stays active
    mouseout                                      mouse leaves an element

  button.addEventListener("click", function() {   example, switches the style purple for body on and off
    document.body.classList.toggle("purple");   
  });

  var button = document.querySelector("button");  example
  var paragraph = document.querySelector("p");
  button.addEventListener("click", function() {
    paragraph.textContent = "someone clicked"; {);

  var lis = document.querySelectorAll("li");      example
  for (var i = 0; i < lis.length; i++) {
    
lis[i].addEventListener("click", function() {
      
this.style.color = "pink";

    } );
  
}




---------- MDN:

document.querySelector()

document.createElement()

element.setAttribute()

node.appendChild()

node.textContent()

node.removeChild()

.onclick

.onchange

element.style.backgroundColor = "..."

-----

document.querySelector("...")

event handler property:
  element
    .onclick              click
    .onfocus              focus
    .onblur               unfocus
    .ondbclick            doubleclick
    .onmouseover          hover
    .onmouseout           stop hover

  window
    .onkeypress           keypress up or down
    .onkeydown            keypress down
    .onkeyup              keypress up

  element.setAttribute("...")   add attribute

---

don't use inline event handlers
  <button onclick="bgchange()">...</button>

---

element.addEventListener("...", ...)       event and function as arguments
element.removeEventListener("...", ...)    event and function as arguments

multiple events on one element possible
.onclick overwrites previous events

---

event object:
  event / evt / e       common names, any name possible

  function ...(e) {     
    e.target ...        
  }

---

default behaviour:
  element.preventDefault()    prevent default behaviour

---

event bubbling and capture:
  bubbling: browser default
    run event on the element, then parent, ..., then on html

  capturing:
    run event on html, then child, ..., then on the element

  element.stopPropagation()     stop event bubbling

event delegation:
  multiple elements with same behaviour: one event on the parent and bubble each child