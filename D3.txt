INSTALLATION:
  <script src="https://d3js.org/d3.v5.min.js"></script>

  https://cdnjs.cloudflare.com/ajax/libs/d3/5.5.0/d3.min.js
---------------------------------------------------------------------------------------------------
OVERVIEW:
  use d3 methods to display data
  can be chained
  can be set to variables
  uses coordinates
    (0, 0) is always top left
  inside <script>...</script>

  d3.select()
    .data()
    ...
---------------------------------------------------------------------------------------------------
STRUCTURE:
  d3.json(url, function(error, data) {
    if (error) console.log(error);
    else {
      const ... = data;
      const width = 1200;
      const height = 500;
      const padding = 70;

      const svg = d3.select("#graph")
                    ...
      
      const xScale = d3.scaleTime()
                       ...
      
      const yScale = d3.scaleLinear()
                       ...
      
      const xAxis = d3.axisBottom(xScale);
      const yAxis = d3.axisRight(yScale);
      
      const tooltip = d3.select("#graph")
                        ...
          
      // chart          
      svg.selectAll("rect")
         ...

      // x-axis
      svg.append("g")
         ...

      // y-axis
      svg.append("g")
         ...
      
      // title
      svg.append("text")
         ...
    }
  })
---------------------------------------------------------------------------------------------------
SELECT:
  can be nested

  .select("...")              get first element, css selector
  .selectAll("...")           get all elements, css selector
---------------------------------------------------------------------------------------------------
ELEMENTS:
  .append("...")              add element to the end
  .insert("...")              add element
  .remove()                   remove element
---------------------------------------------------------------------------------------------------
MANIPULATE:
  .text("...")                get/set text, callback
  .html("...")                get/set inner HTML
  .style("...", "...")        get/set css: property, value, callback
  .attr("...", "...")         set attribute, callback
    class
    fill                      set color
    transform
      translate
  .property("...", "...")     get/set property
  .attr("...", "...")         get/set attribute
  .classed("...", ...)        get/add/remove class, true/false
---------------------------------------------------------------------------------------------------
EVENTS:
  .on("...", ...)             event listener click, callback
    mouseover
    mouseout
    click
  selection.dispatch()        Captures event types like click, mouseover, mouseout. Typenames is the eventname, listener is the event listener
  d3.event                    Event object to access standard event fields such as timestamp or methods like preventDefault
  d3.mouse(container)         Gets the x and y coordinates of the current mouse position in the specified DOM element.
  d3.touch()                  Gets the touch coordinates to a container
---------------------------------------------------------------------------------------------------
ANIMATIONS:
  .transition()               transition effect
    .duration(...)            animation duration in ms
    .ease(...)                easing function
      linear
      elastic
      bounce
    .delay(...)               delay in animation in ms
---------------------------------------------------------------------------------------------------
TRANSFORM:
  .attr("transform", (e, i) => "translate(0," + i * ... + ")" )
    scale
    rotate
    skewX
    skewY
---------------------------------------------------------------------------------------------------
DATA:
  .data(...)                  add data, array or function
  .enter()                    create elements to match data
  .exit()                     remove elements to match data
    .remove()                 initiate removal
  .datum(...)                 ?

  .csv(..., ..., ...)         URL, optional function, optional callback
  .json(..., ...)             URL, callback
  .tsv(..., ...)              URL, callback
  .xml(..., ...)              URL, callback

  callback:
    function(error, data) {
      if (err) ...
      else d3.select...
    }
---------------------------------------------------------------------------------------------------
SVG:
  area:
    const width = ...;              width of area
    const height = ...;             height of area
    
    const svg = d3.select("...")    container element
      .append("svg")                create area
      .attr("width", width)         set area width
      .attr("height", height)       set area height

  shapes:
    svg.append("...")               add shape
      rect                          attr: top-left corner: x, y, dimensions: width, height
      circle                        attr: center: cx, cy, radius: r
      ellipse                       attr: center: cx, cx, radius: rx, ry
      text                          attr: position: x, y, style/color: stroke, black
        .text(...)
      title                         add tooltip, fades in/out
        .text(...)
      line                          attr: start and end: x1, y1, x2, y2, style/color: stroke, black

      g                             group of shapes to add effects, etc. to all of them

    for bar chart to avoid "waves":
      .attr("width", 1 + width / data.length)

  styles:
    .style("...")
      fill
      stroke
      stroke-width
      opacity
      font-family
      font-size
      text-anchor                   start, middle, end
      alignment-baseline            ideographic, middle, hanging

    default: black, no stroke

  transform:
    .attr("transform", "...")       adjust position
      translate(..., ...)           move to x, y
      rotate(...)                   rotate in degrees
      scale(...)                    scale attributes by factor
---------------------------------------------------------------------------------------------------
SCALE:
  const xScale = d3.scaleLinear()         linear scale for quantative data
                   .domain([..., ...])    range of data, min and max
                   .range([..., ...]);    range of axis, min and max

  d3.min(...)                             minimum of data
  d3.max(...)                             maximum of data

  for dates:
    .domain([ d3.min(data, e => new Date(e[0])), d3.max(data, e => new Date(e[0])) ])
    .attr("x", (e) => xScale(new Date(e[0])) )

  // Parse the date / time
  var parseDate = d3.time.format("%d-%b-%y").parse;
  var formatTime = d3.time.format("%e %B");
---------------------------------------------------------------------------------------------------
AXES:
  horizontal and vertical
  line
  ticks
  label
  uses scale

  const xAxis = d3.axisBottom(scale)                              create axis using scale
                  .axisBottom(...)                                alternatives
                  .axisLeft(...)
                  .axisRight(...)
                  .tickFormat(d3.timeFormat("%M:%S"))             tick format

  svg.append("g")                                                 add group
    .attr("transform", "translate(50, 10)")                       set position
    .call(xAxis);                                                 insert axis

  labels:
    svg.append("text")                                            x-axis
       .attr("x", width / 2)
       .attr("y", (height - padding / 2) + 7)
       .style("text-anchor", "middle")
       .style("alignment-baseline", "middle")
       .style("font-family", "Lato")
       .style("font-weight", "bold")
       .text("Years");
    
      svg.append("text")                                          y-axis
         .attr("transform", "translate(20, 200) rotate(-90)")     translate instead of x, y
         .style("text-anchor", "middle")
         .style("alignment-baseline", "middle")
         .style("font-family", "Lato")
         .style("font-weight", "bold")
         .text("Time in minutes");
---------------------------------------------------------------------------------------------------
DATES:
  x: e.Year in YYYY
  y: e.Time in "MM:SS"

  const formatTime = d3.timeFormat("%M:%S");
  const parseTime = d3.timeParse("%M:%S");

  const xScale = d3.scaleTime()
                   .domain([ d3.min(data, e => Date.parse(e.Year)) , ... ])
                   ...

  const yScale = d3.scaleTime()
                   .domain([ d3.min(data, e => parseTime(e.Time)) , ... ])
                   ...

  const xAxis = d3.axisBottom(xScale)
                  .tickFormat(formatTime);
  const yAxis = d3.axisLeft(yScale)
                  .tickFormat(formatTime);

  svg.selectAll("circle")
   .attr("cx", e => xScale(Date.parse(e.Year)))
   .attr("cy", e => yScale(parseTime(e.Time)))
---------------------------------------------------------------------------------------------------
TOOLTIP:
  #tooltip {                                                CSS
    position: absolute;
    text-align: left;
    padding: 5px;
    font-size: 15px;
    font-family: "Lato", sans-serif;
    background: lightgray;
    border-radius: 2px;
    pointer-events: none;
  }

  const tooltip = d3.select("#graph")                       create divs
                    .append("div")
                    .attr("class", "tooltip")
                    .style("opacity", 0);                   opacity 0

  svg.selectAll("...")                                      add to individual shapes
     ...
     .on("mouseover", (e) => {                              mouseover
       tooltip.transition()
              .duration(200)                                fade in
              .style("opacity", .9);                        opacity 0.9
       tooltip.html(...)
              .style("left", (d3.event.pageX) + "px")
              .style("top", (d3.event.pageY - 28) + "px");  
     })
     .on("mouseout", (e) => {                               mouseout
       tooltip.transition()
              .duration(500)                                fade out
              .style("opacity", 0);                         opacity 0
     });
---------------------------------------------------------------------------------------------------
CALLBACKS:
  ...((e, i) => ... this)
    e:    element
    i:    index
    this: DOM object
---------------------------------------------------------------------------------------------------
EXAMPLE:
  const dataset = [[34, 78], ...];
  const w = 500;
  const h = 500;
  const padding = 60;
  
  const svg = d3.select("body")
                .append("svg")
                .attr("width", w)
                .attr("height", h);

  const xScale = d3.scaleLinear()
                   .domain([0, d3.max(dataset, (d) => d[0])])
                   .range([padding, w - padding]);
  
  const yScale = d3.scaleLinear()
                   .domain([0, d3.max(dataset, (d) => d[1])])
                   .range([h - padding, padding]);
  
  svg.selectAll("circle")
     .data(dataset)
     .enter()
     .append("circle")
     .attr("cx", (d) => xScale(d[0]))
     .attr("cy", (d) => yScale(d[1]))
     .attr("r", (d) => 5);
  
  svg.selectAll("text")
     .data(dataset)
     .enter()
     .append("text")
     .text((d) =>  (d[0] + "," + d[1]))
     .attr("x", (d) => xScale(d[0] + 10))
     .attr("y", (d) => yScale(d[1]))
  
  const xAxis = d3.axisBottom(xScale);
  const yAxis = d3.axisLeft(yScale);
  
  svg.append("g")
     .attr("transform", "translate(0," + (h - padding) + ")")
     .call(xAxis);

  svg.append("g")
     .attr("transform", "translate(" + (w - padding) + ", 0)")
     .call(yAxis)
---------------------------------------------------------------------------------------------------
EXAMPLE:
  const data = ...;
  const width = 1200;
  const height = 500;
  const padding = 70;

  const svg = d3.select("#graph")
                .append("svg")
                .attr("width", width)
                .attr("height", height);
  
  const xScale = d3.scaleTime()
                   .domain([ d3.min(data, e => new Date(e[0])), d3.max(data, e => new Date(e[0])) ])
                   .range([ padding, width - padding ]);
  
  const yScale = d3.scaleLinear()
                   .domain([ 0, d3.max(data, (e) => e[1]) ])
                   //.domain([ d3.min(data, (e) => e[1]), d3.max(data, (e) => e[1]) ])
                   .range([ height-padding, padding ]);
  
  const xAxis = d3.axisBottom(xScale);
  const yAxis = d3.axisRight(yScale);
  
  const tooltip = d3.select("#graph")
                    .append("div")
                    .attr("id", "tooltip")
                    .style("opacity", 0);
                
  svg.selectAll("rect")
     .data(data)
     .enter()
     .append("rect")
     .attr("x", (e) => xScale(new Date(e[0])) )
     .attr("y", (e) => yScale(e[1]) )
     //.attr("width", 1 + width / data.length)
     .attr("width", 5 )
     .attr("height", (e) => height - padding - yScale(e[1]) )
     .attr("class", "bar")
     .attr("data-date", (e) => e[0])
     .attr("data-gdp", (e) => e[1])
  
     .on("mouseover", (e) => {
       tooltip.transition()
              .duration(200)
              .style("opacity", .9);
       tooltip.html("Date: " + e[0] + "<br>" + "GDP: " + e[1])
              .attr("data-date", e[0])
              .style("left", (d3.event.pageX) + "px")
              .style("top", (d3.event.pageY - 42) + "px");
     })
  
     .on("mouseout", (e) => {
       tooltip.transition()
              .duration(500)
              .style("opacity", 0);
     });

  svg.append("g")
     .attr("transform", "translate(2," + (height - padding) + ")")
     .attr("id", "x-axis")
     .style("font-size", 15)
     .call(xAxis);

  svg.append("g")
     .attr("transform", "translate(" + (width - padding + 3) + ", 0)")
     .attr("id", "y-axis")
     .style("font-size", 15)
     .call(yAxis);
  
  svg.append("text")
     .attr("x", 100)
     .attr("y", 100)
     .text("US GDP from 1947 to 2015 in billions of Dollars.")
     .style("font-family", "Lato")
     .style("font-size", "25")
     .attr("id", "title");
---------------------------------------------------------------------------------------------------
EXAMPLE:
  const data = ...;
  const margin = 200;
  const width = 600 - margin;
  const height = 500 - margin;

  const svg = d3.select("body")
                .append("svg")
                .attr("width", width)
                .attr("height", height);

  svg.append("text")
     .attr("transform", "translate(100,0)")
     .attr("x", 50)
     .attr("y", 50)
     .attr("font-size", "24px")
     .text("XYZ Foods Stock Price")

  var xScale = d3.scaleBand().range([0, width]).padding(0.4),
      yScale = d3.scaleLinear().range([height, 0]);

  var g = svg.append("g")
             .attr("transform", "translate(" + 100 + "," + 100 + ")");

  d3.csv("XYZ.csv", function(error, data) {
      if (error) {
          throw error;
      }

      xScale.domain(data.map(function(d) { return d.year; }));
      yScale.domain([0, d3.max(data, function(d) { return d.value; })]);

      g.append("g")
       .attr("transform", "translate(0," + height + ")")
       .call(d3.axisBottom(xScale))
       .append("text")
       .attr("y", height - 250)
       .attr("x", width - 100)
       .attr("text-anchor", "end")
       .attr("stroke", "black")
       .text("Year");

      g.append("g")
       .call(d3.axisLeft(yScale).tickFormat(function(d){
           return "$" + d;
       })
       .ticks(10))
       .append("text")
       .attr("transform", "rotate(-90)")
       .attr("y", 6)
       .attr("dy", "-5.1em")
       .attr("text-anchor", "end")
       .attr("stroke", "black")
       .text("Stock Price");

      g.selectAll(".bar")
       .data(data)
       .enter().append("rect")
       .attr("class", "bar")
       .attr("x", function(d) { return xScale(d.year); })
       .attr("y", function(d) { return yScale(d.value); })
       .attr("width", xScale.bandwidth())
       .attr("height", function(d) { return height - yScale(d.value); });
  });